/*
 * epgstation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.6.20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.OpenAPIDateConverter;

namespace X68fpjc.Jellyfin.EPGStation.OpenAPI.Model
{
    /// <summary>
    /// 予約エンコードオプション
    /// </summary>
    [DataContract(Name = "ReserveEncodedOption")]
    public partial class ReserveEncodedOption : IEquatable<ReserveEncodedOption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReserveEncodedOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReserveEncodedOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReserveEncodedOption" /> class.
        /// </summary>
        /// <param name="mode1">エンコードモード1.</param>
        /// <param name="encodeParentDirectoryName1">エンコードモード1親ディレクトリ.</param>
        /// <param name="directory1">エンコードモード1ディレクトリ.</param>
        /// <param name="mode2">エンコードモード2.</param>
        /// <param name="encodeParentDirectoryName2">エンコードモード2親ディレクトリ.</param>
        /// <param name="directory2">エンコードモード2ディレクトリ.</param>
        /// <param name="mode3">エンコードモード3.</param>
        /// <param name="encodeParentDirectoryName3">エンコードモード3親ディレクトリ.</param>
        /// <param name="directory3">エンコードモード3ディレクトリ.</param>
        /// <param name="isDeleteOriginalAfterEncode">エンコード後に ts を削除するか (required).</param>
        public ReserveEncodedOption(string mode1 = default(string), string encodeParentDirectoryName1 = default(string), string directory1 = default(string), string mode2 = default(string), string encodeParentDirectoryName2 = default(string), string directory2 = default(string), string mode3 = default(string), string encodeParentDirectoryName3 = default(string), string directory3 = default(string), bool isDeleteOriginalAfterEncode = default(bool))
        {
            this.IsDeleteOriginalAfterEncode = isDeleteOriginalAfterEncode;
            this.Mode1 = mode1;
            this.EncodeParentDirectoryName1 = encodeParentDirectoryName1;
            this.Directory1 = directory1;
            this.Mode2 = mode2;
            this.EncodeParentDirectoryName2 = encodeParentDirectoryName2;
            this.Directory2 = directory2;
            this.Mode3 = mode3;
            this.EncodeParentDirectoryName3 = encodeParentDirectoryName3;
            this.Directory3 = directory3;
        }

        /// <summary>
        /// エンコードモード1
        /// </summary>
        /// <value>エンコードモード1</value>
        [DataMember(Name = "mode1", EmitDefaultValue = false)]
        public string Mode1 { get; set; }

        /// <summary>
        /// エンコードモード1親ディレクトリ
        /// </summary>
        /// <value>エンコードモード1親ディレクトリ</value>
        [DataMember(Name = "encodeParentDirectoryName1", EmitDefaultValue = false)]
        public string EncodeParentDirectoryName1 { get; set; }

        /// <summary>
        /// エンコードモード1ディレクトリ
        /// </summary>
        /// <value>エンコードモード1ディレクトリ</value>
        [DataMember(Name = "directory1", EmitDefaultValue = false)]
        public string Directory1 { get; set; }

        /// <summary>
        /// エンコードモード2
        /// </summary>
        /// <value>エンコードモード2</value>
        [DataMember(Name = "mode2", EmitDefaultValue = false)]
        public string Mode2 { get; set; }

        /// <summary>
        /// エンコードモード2親ディレクトリ
        /// </summary>
        /// <value>エンコードモード2親ディレクトリ</value>
        [DataMember(Name = "encodeParentDirectoryName2", EmitDefaultValue = false)]
        public string EncodeParentDirectoryName2 { get; set; }

        /// <summary>
        /// エンコードモード2ディレクトリ
        /// </summary>
        /// <value>エンコードモード2ディレクトリ</value>
        [DataMember(Name = "directory2", EmitDefaultValue = false)]
        public string Directory2 { get; set; }

        /// <summary>
        /// エンコードモード3
        /// </summary>
        /// <value>エンコードモード3</value>
        [DataMember(Name = "mode3", EmitDefaultValue = false)]
        public string Mode3 { get; set; }

        /// <summary>
        /// エンコードモード3親ディレクトリ
        /// </summary>
        /// <value>エンコードモード3親ディレクトリ</value>
        [DataMember(Name = "encodeParentDirectoryName3", EmitDefaultValue = false)]
        public string EncodeParentDirectoryName3 { get; set; }

        /// <summary>
        /// エンコードモード3ディレクトリ
        /// </summary>
        /// <value>エンコードモード3ディレクトリ</value>
        [DataMember(Name = "directory3", EmitDefaultValue = false)]
        public string Directory3 { get; set; }

        /// <summary>
        /// エンコード後に ts を削除するか
        /// </summary>
        /// <value>エンコード後に ts を削除するか</value>
        [DataMember(Name = "isDeleteOriginalAfterEncode", IsRequired = true, EmitDefaultValue = true)]
        public bool IsDeleteOriginalAfterEncode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReserveEncodedOption {\n");
            sb.Append("  Mode1: ").Append(Mode1).Append("\n");
            sb.Append("  EncodeParentDirectoryName1: ").Append(EncodeParentDirectoryName1).Append("\n");
            sb.Append("  Directory1: ").Append(Directory1).Append("\n");
            sb.Append("  Mode2: ").Append(Mode2).Append("\n");
            sb.Append("  EncodeParentDirectoryName2: ").Append(EncodeParentDirectoryName2).Append("\n");
            sb.Append("  Directory2: ").Append(Directory2).Append("\n");
            sb.Append("  Mode3: ").Append(Mode3).Append("\n");
            sb.Append("  EncodeParentDirectoryName3: ").Append(EncodeParentDirectoryName3).Append("\n");
            sb.Append("  Directory3: ").Append(Directory3).Append("\n");
            sb.Append("  IsDeleteOriginalAfterEncode: ").Append(IsDeleteOriginalAfterEncode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReserveEncodedOption);
        }

        /// <summary>
        /// Returns true if ReserveEncodedOption instances are equal
        /// </summary>
        /// <param name="input">Instance of ReserveEncodedOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReserveEncodedOption input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Mode1 == input.Mode1 ||
                    (this.Mode1 != null &&
                    this.Mode1.Equals(input.Mode1))
                ) && 
                (
                    this.EncodeParentDirectoryName1 == input.EncodeParentDirectoryName1 ||
                    (this.EncodeParentDirectoryName1 != null &&
                    this.EncodeParentDirectoryName1.Equals(input.EncodeParentDirectoryName1))
                ) && 
                (
                    this.Directory1 == input.Directory1 ||
                    (this.Directory1 != null &&
                    this.Directory1.Equals(input.Directory1))
                ) && 
                (
                    this.Mode2 == input.Mode2 ||
                    (this.Mode2 != null &&
                    this.Mode2.Equals(input.Mode2))
                ) && 
                (
                    this.EncodeParentDirectoryName2 == input.EncodeParentDirectoryName2 ||
                    (this.EncodeParentDirectoryName2 != null &&
                    this.EncodeParentDirectoryName2.Equals(input.EncodeParentDirectoryName2))
                ) && 
                (
                    this.Directory2 == input.Directory2 ||
                    (this.Directory2 != null &&
                    this.Directory2.Equals(input.Directory2))
                ) && 
                (
                    this.Mode3 == input.Mode3 ||
                    (this.Mode3 != null &&
                    this.Mode3.Equals(input.Mode3))
                ) && 
                (
                    this.EncodeParentDirectoryName3 == input.EncodeParentDirectoryName3 ||
                    (this.EncodeParentDirectoryName3 != null &&
                    this.EncodeParentDirectoryName3.Equals(input.EncodeParentDirectoryName3))
                ) && 
                (
                    this.Directory3 == input.Directory3 ||
                    (this.Directory3 != null &&
                    this.Directory3.Equals(input.Directory3))
                ) && 
                (
                    this.IsDeleteOriginalAfterEncode == input.IsDeleteOriginalAfterEncode ||
                    this.IsDeleteOriginalAfterEncode.Equals(input.IsDeleteOriginalAfterEncode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Mode1 != null)
                {
                    hashCode = (hashCode * 59) + this.Mode1.GetHashCode();
                }
                if (this.EncodeParentDirectoryName1 != null)
                {
                    hashCode = (hashCode * 59) + this.EncodeParentDirectoryName1.GetHashCode();
                }
                if (this.Directory1 != null)
                {
                    hashCode = (hashCode * 59) + this.Directory1.GetHashCode();
                }
                if (this.Mode2 != null)
                {
                    hashCode = (hashCode * 59) + this.Mode2.GetHashCode();
                }
                if (this.EncodeParentDirectoryName2 != null)
                {
                    hashCode = (hashCode * 59) + this.EncodeParentDirectoryName2.GetHashCode();
                }
                if (this.Directory2 != null)
                {
                    hashCode = (hashCode * 59) + this.Directory2.GetHashCode();
                }
                if (this.Mode3 != null)
                {
                    hashCode = (hashCode * 59) + this.Mode3.GetHashCode();
                }
                if (this.EncodeParentDirectoryName3 != null)
                {
                    hashCode = (hashCode * 59) + this.EncodeParentDirectoryName3.GetHashCode();
                }
                if (this.Directory3 != null)
                {
                    hashCode = (hashCode * 59) + this.Directory3.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDeleteOriginalAfterEncode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
