/*
 * epgstation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.6.20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.OpenAPIDateConverter;

namespace X68fpjc.Jellyfin.EPGStation.OpenAPI.Model
{
    /// <summary>
    /// ストリーム情報
    /// </summary>
    [DataContract(Name = "StreamInfoItem")]
    public partial class StreamInfoItem : IEquatable<StreamInfoItem>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public StreamType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StreamInfoItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StreamInfoItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StreamInfoItem" /> class.
        /// </summary>
        /// <param name="streamId">ストリーム id (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="mode">ストリーミング設定 (required).</param>
        /// <param name="isEnable">放送波が有効か (HLS 形式の場合有効) (required).</param>
        /// <param name="channelId">放送局 id (required).</param>
        /// <param name="videoFileId">ビデオファイル id.</param>
        /// <param name="recordedId">録画済み番組 id.</param>
        /// <param name="name">ストリーミング番組名 (required).</param>
        /// <param name="startAt">時刻 (ms) (required).</param>
        /// <param name="endAt">時刻 (ms) (required).</param>
        /// <param name="description">ストリーミング番組詳細.</param>
        /// <param name="extended">ストリーミング番組拡張.</param>
        public StreamInfoItem(int streamId = default(int), StreamType type = default(StreamType), decimal mode = default(decimal), bool isEnable = default(bool), long channelId = default(long), int videoFileId = default(int), int recordedId = default(int), string name = default(string), long startAt = default(long), long endAt = default(long), string description = default(string), string extended = default(string))
        {
            this.StreamId = streamId;
            this.Type = type;
            this.Mode = mode;
            this.IsEnable = isEnable;
            this.ChannelId = channelId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for StreamInfoItem and cannot be null");
            }
            this.Name = name;
            this.StartAt = startAt;
            this.EndAt = endAt;
            this.VideoFileId = videoFileId;
            this.RecordedId = recordedId;
            this.Description = description;
            this.Extended = extended;
        }

        /// <summary>
        /// ストリーム id
        /// </summary>
        /// <value>ストリーム id</value>
        [DataMember(Name = "streamId", IsRequired = true, EmitDefaultValue = false)]
        public int StreamId { get; set; }

        /// <summary>
        /// ストリーミング設定
        /// </summary>
        /// <value>ストリーミング設定</value>
        [DataMember(Name = "mode", IsRequired = true, EmitDefaultValue = false)]
        public decimal Mode { get; set; }

        /// <summary>
        /// 放送波が有効か (HLS 形式の場合有効)
        /// </summary>
        /// <value>放送波が有効か (HLS 形式の場合有効)</value>
        [DataMember(Name = "isEnable", IsRequired = true, EmitDefaultValue = true)]
        public bool IsEnable { get; set; }

        /// <summary>
        /// 放送局 id
        /// </summary>
        /// <value>放送局 id</value>
        [DataMember(Name = "channelId", IsRequired = true, EmitDefaultValue = false)]
        public long ChannelId { get; set; }

        /// <summary>
        /// ビデオファイル id
        /// </summary>
        /// <value>ビデオファイル id</value>
        [DataMember(Name = "videoFileId", EmitDefaultValue = false)]
        public int VideoFileId { get; set; }

        /// <summary>
        /// 録画済み番組 id
        /// </summary>
        /// <value>録画済み番組 id</value>
        [DataMember(Name = "recordedId", EmitDefaultValue = false)]
        public int RecordedId { get; set; }

        /// <summary>
        /// ストリーミング番組名
        /// </summary>
        /// <value>ストリーミング番組名</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// 時刻 (ms)
        /// </summary>
        /// <value>時刻 (ms)</value>
        [DataMember(Name = "startAt", IsRequired = true, EmitDefaultValue = false)]
        public long StartAt { get; set; }

        /// <summary>
        /// 時刻 (ms)
        /// </summary>
        /// <value>時刻 (ms)</value>
        [DataMember(Name = "endAt", IsRequired = true, EmitDefaultValue = false)]
        public long EndAt { get; set; }

        /// <summary>
        /// ストリーミング番組詳細
        /// </summary>
        /// <value>ストリーミング番組詳細</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// ストリーミング番組拡張
        /// </summary>
        /// <value>ストリーミング番組拡張</value>
        [DataMember(Name = "extended", EmitDefaultValue = false)]
        public string Extended { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StreamInfoItem {\n");
            sb.Append("  StreamId: ").Append(StreamId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  IsEnable: ").Append(IsEnable).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  VideoFileId: ").Append(VideoFileId).Append("\n");
            sb.Append("  RecordedId: ").Append(RecordedId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StartAt: ").Append(StartAt).Append("\n");
            sb.Append("  EndAt: ").Append(EndAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Extended: ").Append(Extended).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StreamInfoItem);
        }

        /// <summary>
        /// Returns true if StreamInfoItem instances are equal
        /// </summary>
        /// <param name="input">Instance of StreamInfoItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StreamInfoItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StreamId == input.StreamId ||
                    this.StreamId.Equals(input.StreamId)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Mode == input.Mode ||
                    this.Mode.Equals(input.Mode)
                ) && 
                (
                    this.IsEnable == input.IsEnable ||
                    this.IsEnable.Equals(input.IsEnable)
                ) && 
                (
                    this.ChannelId == input.ChannelId ||
                    this.ChannelId.Equals(input.ChannelId)
                ) && 
                (
                    this.VideoFileId == input.VideoFileId ||
                    this.VideoFileId.Equals(input.VideoFileId)
                ) && 
                (
                    this.RecordedId == input.RecordedId ||
                    this.RecordedId.Equals(input.RecordedId)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.StartAt == input.StartAt ||
                    this.StartAt.Equals(input.StartAt)
                ) && 
                (
                    this.EndAt == input.EndAt ||
                    this.EndAt.Equals(input.EndAt)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Extended == input.Extended ||
                    (this.Extended != null &&
                    this.Extended.Equals(input.Extended))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.StreamId.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.Mode.GetHashCode();
                hashCode = (hashCode * 59) + this.IsEnable.GetHashCode();
                hashCode = (hashCode * 59) + this.ChannelId.GetHashCode();
                hashCode = (hashCode * 59) + this.VideoFileId.GetHashCode();
                hashCode = (hashCode * 59) + this.RecordedId.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StartAt.GetHashCode();
                hashCode = (hashCode * 59) + this.EndAt.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Extended != null)
                {
                    hashCode = (hashCode * 59) + this.Extended.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ChannelId (long) maximum
            if (this.ChannelId > (long)6553565535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChannelId, must be a value less than or equal to 6553565535.", new [] { "ChannelId" });
            }

            yield break;
        }
    }

}
