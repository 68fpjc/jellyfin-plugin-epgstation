/*
 * epgstation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.6.20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.OpenAPIDateConverter;

namespace X68fpjc.Jellyfin.EPGStation.OpenAPI.Model
{
    /// <summary>
    /// 番組表の放送局データ
    /// </summary>
    [DataContract(Name = "ScheduleChannleItem")]
    public partial class ScheduleChannleItem : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ChannelType
        /// </summary>
        [DataMember(Name = "channelType", IsRequired = true, EmitDefaultValue = true)]
        public ChannelType ChannelType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleChannleItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ScheduleChannleItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleChannleItem" /> class.
        /// </summary>
        /// <param name="id">放送局 id (required).</param>
        /// <param name="serviceId">service id (required).</param>
        /// <param name="networkId">network id (required).</param>
        /// <param name="name">放送局名 (required).</param>
        /// <param name="remoteControlKeyId">リモコン番号.</param>
        /// <param name="hasLogoData">ロゴデータを持っているか (required).</param>
        /// <param name="channelType">channelType (required).</param>
        public ScheduleChannleItem(long id = default(long), long serviceId = default(long), long networkId = default(long), string name = default(string), int remoteControlKeyId = default(int), bool hasLogoData = default(bool), ChannelType channelType = default(ChannelType))
        {
            this.Id = id;
            this.ServiceId = serviceId;
            this.NetworkId = networkId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ScheduleChannleItem and cannot be null");
            }
            this.Name = name;
            this.HasLogoData = hasLogoData;
            this.ChannelType = channelType;
            this.RemoteControlKeyId = remoteControlKeyId;
        }

        /// <summary>
        /// 放送局 id
        /// </summary>
        /// <value>放送局 id</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public long Id { get; set; }

        /// <summary>
        /// service id
        /// </summary>
        /// <value>service id</value>
        [DataMember(Name = "serviceId", IsRequired = true, EmitDefaultValue = true)]
        public long ServiceId { get; set; }

        /// <summary>
        /// network id
        /// </summary>
        /// <value>network id</value>
        [DataMember(Name = "networkId", IsRequired = true, EmitDefaultValue = true)]
        public long NetworkId { get; set; }

        /// <summary>
        /// 放送局名
        /// </summary>
        /// <value>放送局名</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// リモコン番号
        /// </summary>
        /// <value>リモコン番号</value>
        [DataMember(Name = "remoteControlKeyId", EmitDefaultValue = false)]
        public int RemoteControlKeyId { get; set; }

        /// <summary>
        /// ロゴデータを持っているか
        /// </summary>
        /// <value>ロゴデータを持っているか</value>
        [DataMember(Name = "hasLogoData", IsRequired = true, EmitDefaultValue = true)]
        public bool HasLogoData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScheduleChannleItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  NetworkId: ").Append(NetworkId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RemoteControlKeyId: ").Append(RemoteControlKeyId).Append("\n");
            sb.Append("  HasLogoData: ").Append(HasLogoData).Append("\n");
            sb.Append("  ChannelType: ").Append(ChannelType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (long) maximum
            if (this.Id > (long)6553565535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must be a value less than or equal to 6553565535.", new [] { "Id" });
            }

            // ServiceId (long) maximum
            if (this.ServiceId > (long)6553565535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ServiceId, must be a value less than or equal to 6553565535.", new [] { "ServiceId" });
            }

            // NetworkId (long) maximum
            if (this.NetworkId > (long)6553565535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NetworkId, must be a value less than or equal to 6553565535.", new [] { "NetworkId" });
            }

            yield break;
        }
    }

}
