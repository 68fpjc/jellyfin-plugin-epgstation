/*
 * epgstation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.6.20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.OpenAPIDateConverter;

namespace X68fpjc.Jellyfin.EPGStation.OpenAPI.Model
{
    /// <summary>
    /// ルール検索オプション
    /// </summary>
    [DataContract(Name = "RuleSearchOption")]
    public partial class RuleSearchOption : IEquatable<RuleSearchOption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleSearchOption" /> class.
        /// </summary>
        /// <param name="keyword">検索キーワード.</param>
        /// <param name="ignoreKeyword">除外検索キーワード.</param>
        /// <param name="keyCS">大文字小文字区別有効化 (検索キーワード).</param>
        /// <param name="keyRegExp">正規表現 (検索キーワード).</param>
        /// <param name="name">番組名 (検索キーワード).</param>
        /// <param name="description">概要 (検索キーワード).</param>
        /// <param name="extended">詳細 (検索キーワード).</param>
        /// <param name="ignoreKeyCS">大文字小文字区別有効化 (除外検索キーワード).</param>
        /// <param name="ignoreKeyRegExp">正規表現 (除外検索キーワード).</param>
        /// <param name="ignoreName">番組名 (除外検索キーワード).</param>
        /// <param name="ignoreDescription">概要 (除外検索キーワード).</param>
        /// <param name="ignoreExtended">詳細 (除外検索キーワード).</param>
        /// <param name="gR">GR.</param>
        /// <param name="bS">BS.</param>
        /// <param name="cS">CS.</param>
        /// <param name="sKY">SKY.</param>
        /// <param name="channelIds">放送局.</param>
        /// <param name="genres">ジャンル.</param>
        /// <param name="times">時刻範囲.</param>
        /// <param name="isFree">無料放送か.</param>
        /// <param name="durationMin">番組最小時間 (分).</param>
        /// <param name="durationMax">番組最大時間 (分).</param>
        /// <param name="searchPeriods">検索対象期間.</param>
        public RuleSearchOption(string keyword = default(string), string ignoreKeyword = default(string), bool keyCS = default(bool), bool keyRegExp = default(bool), bool name = default(bool), bool description = default(bool), bool extended = default(bool), bool ignoreKeyCS = default(bool), bool ignoreKeyRegExp = default(bool), bool ignoreName = default(bool), bool ignoreDescription = default(bool), bool ignoreExtended = default(bool), bool gR = default(bool), bool bS = default(bool), bool cS = default(bool), bool sKY = default(bool), List<long> channelIds = default(List<long>), List<Genre> genres = default(List<Genre>), List<SearchTime> times = default(List<SearchTime>), bool isFree = default(bool), int durationMin = default(int), int durationMax = default(int), List<SearchPeriod> searchPeriods = default(List<SearchPeriod>))
        {
            this.Keyword = keyword;
            this.IgnoreKeyword = ignoreKeyword;
            this.KeyCS = keyCS;
            this.KeyRegExp = keyRegExp;
            this.Name = name;
            this.Description = description;
            this.Extended = extended;
            this.IgnoreKeyCS = ignoreKeyCS;
            this.IgnoreKeyRegExp = ignoreKeyRegExp;
            this.IgnoreName = ignoreName;
            this.IgnoreDescription = ignoreDescription;
            this.IgnoreExtended = ignoreExtended;
            this.GR = gR;
            this.BS = bS;
            this.CS = cS;
            this.SKY = sKY;
            this.ChannelIds = channelIds;
            this.Genres = genres;
            this.Times = times;
            this.IsFree = isFree;
            this.DurationMin = durationMin;
            this.DurationMax = durationMax;
            this.SearchPeriods = searchPeriods;
        }

        /// <summary>
        /// 検索キーワード
        /// </summary>
        /// <value>検索キーワード</value>
        [DataMember(Name = "keyword", EmitDefaultValue = false)]
        public string Keyword { get; set; }

        /// <summary>
        /// 除外検索キーワード
        /// </summary>
        /// <value>除外検索キーワード</value>
        [DataMember(Name = "ignoreKeyword", EmitDefaultValue = false)]
        public string IgnoreKeyword { get; set; }

        /// <summary>
        /// 大文字小文字区別有効化 (検索キーワード)
        /// </summary>
        /// <value>大文字小文字区別有効化 (検索キーワード)</value>
        [DataMember(Name = "keyCS", EmitDefaultValue = true)]
        public bool KeyCS { get; set; }

        /// <summary>
        /// 正規表現 (検索キーワード)
        /// </summary>
        /// <value>正規表現 (検索キーワード)</value>
        [DataMember(Name = "keyRegExp", EmitDefaultValue = true)]
        public bool KeyRegExp { get; set; }

        /// <summary>
        /// 番組名 (検索キーワード)
        /// </summary>
        /// <value>番組名 (検索キーワード)</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public bool Name { get; set; }

        /// <summary>
        /// 概要 (検索キーワード)
        /// </summary>
        /// <value>概要 (検索キーワード)</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public bool Description { get; set; }

        /// <summary>
        /// 詳細 (検索キーワード)
        /// </summary>
        /// <value>詳細 (検索キーワード)</value>
        [DataMember(Name = "extended", EmitDefaultValue = true)]
        public bool Extended { get; set; }

        /// <summary>
        /// 大文字小文字区別有効化 (除外検索キーワード)
        /// </summary>
        /// <value>大文字小文字区別有効化 (除外検索キーワード)</value>
        [DataMember(Name = "ignoreKeyCS", EmitDefaultValue = true)]
        public bool IgnoreKeyCS { get; set; }

        /// <summary>
        /// 正規表現 (除外検索キーワード)
        /// </summary>
        /// <value>正規表現 (除外検索キーワード)</value>
        [DataMember(Name = "ignoreKeyRegExp", EmitDefaultValue = true)]
        public bool IgnoreKeyRegExp { get; set; }

        /// <summary>
        /// 番組名 (除外検索キーワード)
        /// </summary>
        /// <value>番組名 (除外検索キーワード)</value>
        [DataMember(Name = "ignoreName", EmitDefaultValue = true)]
        public bool IgnoreName { get; set; }

        /// <summary>
        /// 概要 (除外検索キーワード)
        /// </summary>
        /// <value>概要 (除外検索キーワード)</value>
        [DataMember(Name = "ignoreDescription", EmitDefaultValue = true)]
        public bool IgnoreDescription { get; set; }

        /// <summary>
        /// 詳細 (除外検索キーワード)
        /// </summary>
        /// <value>詳細 (除外検索キーワード)</value>
        [DataMember(Name = "ignoreExtended", EmitDefaultValue = true)]
        public bool IgnoreExtended { get; set; }

        /// <summary>
        /// GR
        /// </summary>
        /// <value>GR</value>
        [DataMember(Name = "GR", EmitDefaultValue = true)]
        public bool GR { get; set; }

        /// <summary>
        /// BS
        /// </summary>
        /// <value>BS</value>
        [DataMember(Name = "BS", EmitDefaultValue = true)]
        public bool BS { get; set; }

        /// <summary>
        /// CS
        /// </summary>
        /// <value>CS</value>
        [DataMember(Name = "CS", EmitDefaultValue = true)]
        public bool CS { get; set; }

        /// <summary>
        /// SKY
        /// </summary>
        /// <value>SKY</value>
        [DataMember(Name = "SKY", EmitDefaultValue = true)]
        public bool SKY { get; set; }

        /// <summary>
        /// 放送局
        /// </summary>
        /// <value>放送局</value>
        [DataMember(Name = "channelIds", EmitDefaultValue = false)]
        public List<long> ChannelIds { get; set; }

        /// <summary>
        /// ジャンル
        /// </summary>
        /// <value>ジャンル</value>
        [DataMember(Name = "genres", EmitDefaultValue = false)]
        public List<Genre> Genres { get; set; }

        /// <summary>
        /// 時刻範囲
        /// </summary>
        /// <value>時刻範囲</value>
        [DataMember(Name = "times", EmitDefaultValue = false)]
        public List<SearchTime> Times { get; set; }

        /// <summary>
        /// 無料放送か
        /// </summary>
        /// <value>無料放送か</value>
        [DataMember(Name = "isFree", EmitDefaultValue = true)]
        public bool IsFree { get; set; }

        /// <summary>
        /// 番組最小時間 (分)
        /// </summary>
        /// <value>番組最小時間 (分)</value>
        [DataMember(Name = "durationMin", EmitDefaultValue = false)]
        public int DurationMin { get; set; }

        /// <summary>
        /// 番組最大時間 (分)
        /// </summary>
        /// <value>番組最大時間 (分)</value>
        [DataMember(Name = "durationMax", EmitDefaultValue = false)]
        public int DurationMax { get; set; }

        /// <summary>
        /// 検索対象期間
        /// </summary>
        /// <value>検索対象期間</value>
        [DataMember(Name = "searchPeriods", EmitDefaultValue = false)]
        public List<SearchPeriod> SearchPeriods { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RuleSearchOption {\n");
            sb.Append("  Keyword: ").Append(Keyword).Append("\n");
            sb.Append("  IgnoreKeyword: ").Append(IgnoreKeyword).Append("\n");
            sb.Append("  KeyCS: ").Append(KeyCS).Append("\n");
            sb.Append("  KeyRegExp: ").Append(KeyRegExp).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Extended: ").Append(Extended).Append("\n");
            sb.Append("  IgnoreKeyCS: ").Append(IgnoreKeyCS).Append("\n");
            sb.Append("  IgnoreKeyRegExp: ").Append(IgnoreKeyRegExp).Append("\n");
            sb.Append("  IgnoreName: ").Append(IgnoreName).Append("\n");
            sb.Append("  IgnoreDescription: ").Append(IgnoreDescription).Append("\n");
            sb.Append("  IgnoreExtended: ").Append(IgnoreExtended).Append("\n");
            sb.Append("  GR: ").Append(GR).Append("\n");
            sb.Append("  BS: ").Append(BS).Append("\n");
            sb.Append("  CS: ").Append(CS).Append("\n");
            sb.Append("  SKY: ").Append(SKY).Append("\n");
            sb.Append("  ChannelIds: ").Append(ChannelIds).Append("\n");
            sb.Append("  Genres: ").Append(Genres).Append("\n");
            sb.Append("  Times: ").Append(Times).Append("\n");
            sb.Append("  IsFree: ").Append(IsFree).Append("\n");
            sb.Append("  DurationMin: ").Append(DurationMin).Append("\n");
            sb.Append("  DurationMax: ").Append(DurationMax).Append("\n");
            sb.Append("  SearchPeriods: ").Append(SearchPeriods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RuleSearchOption);
        }

        /// <summary>
        /// Returns true if RuleSearchOption instances are equal
        /// </summary>
        /// <param name="input">Instance of RuleSearchOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuleSearchOption input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Keyword == input.Keyword ||
                    (this.Keyword != null &&
                    this.Keyword.Equals(input.Keyword))
                ) && 
                (
                    this.IgnoreKeyword == input.IgnoreKeyword ||
                    (this.IgnoreKeyword != null &&
                    this.IgnoreKeyword.Equals(input.IgnoreKeyword))
                ) && 
                (
                    this.KeyCS == input.KeyCS ||
                    this.KeyCS.Equals(input.KeyCS)
                ) && 
                (
                    this.KeyRegExp == input.KeyRegExp ||
                    this.KeyRegExp.Equals(input.KeyRegExp)
                ) && 
                (
                    this.Name == input.Name ||
                    this.Name.Equals(input.Name)
                ) && 
                (
                    this.Description == input.Description ||
                    this.Description.Equals(input.Description)
                ) && 
                (
                    this.Extended == input.Extended ||
                    this.Extended.Equals(input.Extended)
                ) && 
                (
                    this.IgnoreKeyCS == input.IgnoreKeyCS ||
                    this.IgnoreKeyCS.Equals(input.IgnoreKeyCS)
                ) && 
                (
                    this.IgnoreKeyRegExp == input.IgnoreKeyRegExp ||
                    this.IgnoreKeyRegExp.Equals(input.IgnoreKeyRegExp)
                ) && 
                (
                    this.IgnoreName == input.IgnoreName ||
                    this.IgnoreName.Equals(input.IgnoreName)
                ) && 
                (
                    this.IgnoreDescription == input.IgnoreDescription ||
                    this.IgnoreDescription.Equals(input.IgnoreDescription)
                ) && 
                (
                    this.IgnoreExtended == input.IgnoreExtended ||
                    this.IgnoreExtended.Equals(input.IgnoreExtended)
                ) && 
                (
                    this.GR == input.GR ||
                    this.GR.Equals(input.GR)
                ) && 
                (
                    this.BS == input.BS ||
                    this.BS.Equals(input.BS)
                ) && 
                (
                    this.CS == input.CS ||
                    this.CS.Equals(input.CS)
                ) && 
                (
                    this.SKY == input.SKY ||
                    this.SKY.Equals(input.SKY)
                ) && 
                (
                    this.ChannelIds == input.ChannelIds ||
                    this.ChannelIds != null &&
                    input.ChannelIds != null &&
                    this.ChannelIds.SequenceEqual(input.ChannelIds)
                ) && 
                (
                    this.Genres == input.Genres ||
                    this.Genres != null &&
                    input.Genres != null &&
                    this.Genres.SequenceEqual(input.Genres)
                ) && 
                (
                    this.Times == input.Times ||
                    this.Times != null &&
                    input.Times != null &&
                    this.Times.SequenceEqual(input.Times)
                ) && 
                (
                    this.IsFree == input.IsFree ||
                    this.IsFree.Equals(input.IsFree)
                ) && 
                (
                    this.DurationMin == input.DurationMin ||
                    this.DurationMin.Equals(input.DurationMin)
                ) && 
                (
                    this.DurationMax == input.DurationMax ||
                    this.DurationMax.Equals(input.DurationMax)
                ) && 
                (
                    this.SearchPeriods == input.SearchPeriods ||
                    this.SearchPeriods != null &&
                    input.SearchPeriods != null &&
                    this.SearchPeriods.SequenceEqual(input.SearchPeriods)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Keyword != null)
                {
                    hashCode = (hashCode * 59) + this.Keyword.GetHashCode();
                }
                if (this.IgnoreKeyword != null)
                {
                    hashCode = (hashCode * 59) + this.IgnoreKeyword.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.KeyCS.GetHashCode();
                hashCode = (hashCode * 59) + this.KeyRegExp.GetHashCode();
                hashCode = (hashCode * 59) + this.Name.GetHashCode();
                hashCode = (hashCode * 59) + this.Description.GetHashCode();
                hashCode = (hashCode * 59) + this.Extended.GetHashCode();
                hashCode = (hashCode * 59) + this.IgnoreKeyCS.GetHashCode();
                hashCode = (hashCode * 59) + this.IgnoreKeyRegExp.GetHashCode();
                hashCode = (hashCode * 59) + this.IgnoreName.GetHashCode();
                hashCode = (hashCode * 59) + this.IgnoreDescription.GetHashCode();
                hashCode = (hashCode * 59) + this.IgnoreExtended.GetHashCode();
                hashCode = (hashCode * 59) + this.GR.GetHashCode();
                hashCode = (hashCode * 59) + this.BS.GetHashCode();
                hashCode = (hashCode * 59) + this.CS.GetHashCode();
                hashCode = (hashCode * 59) + this.SKY.GetHashCode();
                if (this.ChannelIds != null)
                {
                    hashCode = (hashCode * 59) + this.ChannelIds.GetHashCode();
                }
                if (this.Genres != null)
                {
                    hashCode = (hashCode * 59) + this.Genres.GetHashCode();
                }
                if (this.Times != null)
                {
                    hashCode = (hashCode * 59) + this.Times.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsFree.GetHashCode();
                hashCode = (hashCode * 59) + this.DurationMin.GetHashCode();
                hashCode = (hashCode * 59) + this.DurationMax.GetHashCode();
                if (this.SearchPeriods != null)
                {
                    hashCode = (hashCode * 59) + this.SearchPeriods.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
