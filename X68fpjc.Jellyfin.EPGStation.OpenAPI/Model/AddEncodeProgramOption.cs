/*
 * epgstation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.6.20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.OpenAPIDateConverter;

namespace X68fpjc.Jellyfin.EPGStation.OpenAPI.Model
{
    /// <summary>
    /// エンコード追加時のオプション
    /// </summary>
    [DataContract(Name = "AddEncodeProgramOption")]
    public partial class AddEncodeProgramOption : IEquatable<AddEncodeProgramOption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddEncodeProgramOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddEncodeProgramOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddEncodeProgramOption" /> class.
        /// </summary>
        /// <param name="recordedId">録画済み番組 id (required).</param>
        /// <param name="sourceVideoFileId">ビデオファイル id (required).</param>
        /// <param name="parentDir">親ディレクトリ名 config recorded の name (required).</param>
        /// <param name="directory">親ディレクトリ以下のディレクトリ設定.</param>
        /// <param name="mode">エンコードプリセット名 config encode の name (required).</param>
        /// <param name="removeOriginal">元ファイルを削除するか (required).</param>
        public AddEncodeProgramOption(int recordedId = default(int), int sourceVideoFileId = default(int), string parentDir = default(string), string directory = default(string), string mode = default(string), bool removeOriginal = default(bool))
        {
            this.RecordedId = recordedId;
            this.SourceVideoFileId = sourceVideoFileId;
            // to ensure "parentDir" is required (not null)
            if (parentDir == null)
            {
                throw new ArgumentNullException("parentDir is a required property for AddEncodeProgramOption and cannot be null");
            }
            this.ParentDir = parentDir;
            // to ensure "mode" is required (not null)
            if (mode == null)
            {
                throw new ArgumentNullException("mode is a required property for AddEncodeProgramOption and cannot be null");
            }
            this.Mode = mode;
            this.RemoveOriginal = removeOriginal;
            this.Directory = directory;
        }

        /// <summary>
        /// 録画済み番組 id
        /// </summary>
        /// <value>録画済み番組 id</value>
        [DataMember(Name = "recordedId", IsRequired = true, EmitDefaultValue = false)]
        public int RecordedId { get; set; }

        /// <summary>
        /// ビデオファイル id
        /// </summary>
        /// <value>ビデオファイル id</value>
        [DataMember(Name = "sourceVideoFileId", IsRequired = true, EmitDefaultValue = false)]
        public int SourceVideoFileId { get; set; }

        /// <summary>
        /// 親ディレクトリ名 config recorded の name
        /// </summary>
        /// <value>親ディレクトリ名 config recorded の name</value>
        [DataMember(Name = "parentDir", IsRequired = true, EmitDefaultValue = false)]
        public string ParentDir { get; set; }

        /// <summary>
        /// 親ディレクトリ以下のディレクトリ設定
        /// </summary>
        /// <value>親ディレクトリ以下のディレクトリ設定</value>
        [DataMember(Name = "directory", EmitDefaultValue = false)]
        public string Directory { get; set; }

        /// <summary>
        /// エンコードプリセット名 config encode の name
        /// </summary>
        /// <value>エンコードプリセット名 config encode の name</value>
        [DataMember(Name = "mode", IsRequired = true, EmitDefaultValue = false)]
        public string Mode { get; set; }

        /// <summary>
        /// 元ファイルを削除するか
        /// </summary>
        /// <value>元ファイルを削除するか</value>
        [DataMember(Name = "removeOriginal", IsRequired = true, EmitDefaultValue = true)]
        public bool RemoveOriginal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddEncodeProgramOption {\n");
            sb.Append("  RecordedId: ").Append(RecordedId).Append("\n");
            sb.Append("  SourceVideoFileId: ").Append(SourceVideoFileId).Append("\n");
            sb.Append("  ParentDir: ").Append(ParentDir).Append("\n");
            sb.Append("  Directory: ").Append(Directory).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  RemoveOriginal: ").Append(RemoveOriginal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddEncodeProgramOption);
        }

        /// <summary>
        /// Returns true if AddEncodeProgramOption instances are equal
        /// </summary>
        /// <param name="input">Instance of AddEncodeProgramOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddEncodeProgramOption input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RecordedId == input.RecordedId ||
                    this.RecordedId.Equals(input.RecordedId)
                ) && 
                (
                    this.SourceVideoFileId == input.SourceVideoFileId ||
                    this.SourceVideoFileId.Equals(input.SourceVideoFileId)
                ) && 
                (
                    this.ParentDir == input.ParentDir ||
                    (this.ParentDir != null &&
                    this.ParentDir.Equals(input.ParentDir))
                ) && 
                (
                    this.Directory == input.Directory ||
                    (this.Directory != null &&
                    this.Directory.Equals(input.Directory))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.RemoveOriginal == input.RemoveOriginal ||
                    this.RemoveOriginal.Equals(input.RemoveOriginal)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.RecordedId.GetHashCode();
                hashCode = (hashCode * 59) + this.SourceVideoFileId.GetHashCode();
                if (this.ParentDir != null)
                {
                    hashCode = (hashCode * 59) + this.ParentDir.GetHashCode();
                }
                if (this.Directory != null)
                {
                    hashCode = (hashCode * 59) + this.Directory.GetHashCode();
                }
                if (this.Mode != null)
                {
                    hashCode = (hashCode * 59) + this.Mode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RemoveOriginal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
