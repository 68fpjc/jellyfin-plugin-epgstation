/*
 * epgstation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.6.20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.OpenAPIDateConverter;

namespace X68fpjc.Jellyfin.EPGStation.OpenAPI.Model
{
    /// <summary>
    /// 録画番組情報
    /// </summary>
    [DataContract(Name = "RecordedItem")]
    public partial class RecordedItem : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets VideoType
        /// </summary>
        [DataMember(Name = "videoType", EmitDefaultValue = false)]
        public ProgramVideoType? VideoType { get; set; }

        /// <summary>
        /// Gets or Sets VideoResolution
        /// </summary>
        [DataMember(Name = "videoResolution", EmitDefaultValue = false)]
        public ProgramVideoResolution? VideoResolution { get; set; }

        /// <summary>
        /// Gets or Sets AudioSamplingRate
        /// </summary>
        [DataMember(Name = "audioSamplingRate", EmitDefaultValue = false)]
        public ProgramAudioSamplingRate? AudioSamplingRate { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecordedItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecordedItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecordedItem" /> class.
        /// </summary>
        /// <param name="id">録画済み番組 id (required).</param>
        /// <param name="ruleId">ルール id.</param>
        /// <param name="programId">program id.</param>
        /// <param name="channelId">放送局 id.</param>
        /// <param name="startAt">時刻 (ms) (required).</param>
        /// <param name="endAt">時刻 (ms) (required).</param>
        /// <param name="name">番組名 (required).</param>
        /// <param name="description">番組詳細.</param>
        /// <param name="extended">番組拡張.</param>
        /// <param name="rawExtended">番組拡張 (Mirakurun の extended).</param>
        /// <param name="genre1">ジャンル.</param>
        /// <param name="subGenre1">サブジャンル.</param>
        /// <param name="genre2">ジャンル.</param>
        /// <param name="subGenre2">サブジャンル.</param>
        /// <param name="genre3">ジャンル.</param>
        /// <param name="subGenre3">サブジャンル.</param>
        /// <param name="videoType">videoType.</param>
        /// <param name="videoResolution">videoResolution.</param>
        /// <param name="videoStreamContent">videoStreamContent.</param>
        /// <param name="videoComponentType">videoComponentType.</param>
        /// <param name="audioSamplingRate">audioSamplingRate.</param>
        /// <param name="audioComponentType">audioComponentType.</param>
        /// <param name="isRecording">録画中か (required).</param>
        /// <param name="thumbnails">thumbnails.</param>
        /// <param name="videoFiles">videoFiles.</param>
        /// <param name="dropLog">dropLog.</param>
        /// <param name="tags">tags.</param>
        /// <param name="isEncoding">エンコード中か (required).</param>
        /// <param name="isProtected">自動録画削除対象外か (required).</param>
        public RecordedItem(int id = default(int), int ruleId = default(int), long programId = default(long), long channelId = default(long), long startAt = default(long), long endAt = default(long), string name = default(string), string description = default(string), string extended = default(string), Object rawExtended = default(Object), int genre1 = default(int), int subGenre1 = default(int), int genre2 = default(int), int subGenre2 = default(int), int genre3 = default(int), int subGenre3 = default(int), ProgramVideoType? videoType = default(ProgramVideoType?), ProgramVideoResolution? videoResolution = default(ProgramVideoResolution?), int videoStreamContent = default(int), int videoComponentType = default(int), ProgramAudioSamplingRate? audioSamplingRate = default(ProgramAudioSamplingRate?), int audioComponentType = default(int), bool isRecording = default(bool), List<int> thumbnails = default(List<int>), List<VideoFile> videoFiles = default(List<VideoFile>), DropLogFile dropLog = default(DropLogFile), List<RecordedTag> tags = default(List<RecordedTag>), bool isEncoding = default(bool), bool isProtected = default(bool))
        {
            this.Id = id;
            this.StartAt = startAt;
            this.EndAt = endAt;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for RecordedItem and cannot be null");
            }
            this.Name = name;
            this.IsRecording = isRecording;
            this.IsEncoding = isEncoding;
            this.IsProtected = isProtected;
            this.RuleId = ruleId;
            this.ProgramId = programId;
            this.ChannelId = channelId;
            this.Description = description;
            this.Extended = extended;
            this.RawExtended = rawExtended;
            this.Genre1 = genre1;
            this.SubGenre1 = subGenre1;
            this.Genre2 = genre2;
            this.SubGenre2 = subGenre2;
            this.Genre3 = genre3;
            this.SubGenre3 = subGenre3;
            this.VideoType = videoType;
            this.VideoResolution = videoResolution;
            this.VideoStreamContent = videoStreamContent;
            this.VideoComponentType = videoComponentType;
            this.AudioSamplingRate = audioSamplingRate;
            this.AudioComponentType = audioComponentType;
            this.Thumbnails = thumbnails;
            this.VideoFiles = videoFiles;
            this.DropLog = dropLog;
            this.Tags = tags;
        }

        /// <summary>
        /// 録画済み番組 id
        /// </summary>
        /// <value>録画済み番組 id</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// ルール id
        /// </summary>
        /// <value>ルール id</value>
        [DataMember(Name = "ruleId", EmitDefaultValue = false)]
        public int RuleId { get; set; }

        /// <summary>
        /// program id
        /// </summary>
        /// <value>program id</value>
        [DataMember(Name = "programId", EmitDefaultValue = false)]
        public long ProgramId { get; set; }

        /// <summary>
        /// 放送局 id
        /// </summary>
        /// <value>放送局 id</value>
        [DataMember(Name = "channelId", EmitDefaultValue = false)]
        public long ChannelId { get; set; }

        /// <summary>
        /// 時刻 (ms)
        /// </summary>
        /// <value>時刻 (ms)</value>
        [DataMember(Name = "startAt", IsRequired = true, EmitDefaultValue = true)]
        public long StartAt { get; set; }

        /// <summary>
        /// 時刻 (ms)
        /// </summary>
        /// <value>時刻 (ms)</value>
        [DataMember(Name = "endAt", IsRequired = true, EmitDefaultValue = true)]
        public long EndAt { get; set; }

        /// <summary>
        /// 番組名
        /// </summary>
        /// <value>番組名</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// 番組詳細
        /// </summary>
        /// <value>番組詳細</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// 番組拡張
        /// </summary>
        /// <value>番組拡張</value>
        [DataMember(Name = "extended", EmitDefaultValue = false)]
        public string Extended { get; set; }

        /// <summary>
        /// 番組拡張 (Mirakurun の extended)
        /// </summary>
        /// <value>番組拡張 (Mirakurun の extended)</value>
        [DataMember(Name = "rawExtended", EmitDefaultValue = false)]
        public Object RawExtended { get; set; }

        /// <summary>
        /// ジャンル
        /// </summary>
        /// <value>ジャンル</value>
        [DataMember(Name = "genre1", EmitDefaultValue = false)]
        public int Genre1 { get; set; }

        /// <summary>
        /// サブジャンル
        /// </summary>
        /// <value>サブジャンル</value>
        [DataMember(Name = "subGenre1", EmitDefaultValue = false)]
        public int SubGenre1 { get; set; }

        /// <summary>
        /// ジャンル
        /// </summary>
        /// <value>ジャンル</value>
        [DataMember(Name = "genre2", EmitDefaultValue = false)]
        public int Genre2 { get; set; }

        /// <summary>
        /// サブジャンル
        /// </summary>
        /// <value>サブジャンル</value>
        [DataMember(Name = "subGenre2", EmitDefaultValue = false)]
        public int SubGenre2 { get; set; }

        /// <summary>
        /// ジャンル
        /// </summary>
        /// <value>ジャンル</value>
        [DataMember(Name = "genre3", EmitDefaultValue = false)]
        public int Genre3 { get; set; }

        /// <summary>
        /// サブジャンル
        /// </summary>
        /// <value>サブジャンル</value>
        [DataMember(Name = "subGenre3", EmitDefaultValue = false)]
        public int SubGenre3 { get; set; }

        /// <summary>
        /// Gets or Sets VideoStreamContent
        /// </summary>
        [DataMember(Name = "videoStreamContent", EmitDefaultValue = false)]
        public int VideoStreamContent { get; set; }

        /// <summary>
        /// Gets or Sets VideoComponentType
        /// </summary>
        [DataMember(Name = "videoComponentType", EmitDefaultValue = false)]
        public int VideoComponentType { get; set; }

        /// <summary>
        /// Gets or Sets AudioComponentType
        /// </summary>
        [DataMember(Name = "audioComponentType", EmitDefaultValue = false)]
        public int AudioComponentType { get; set; }

        /// <summary>
        /// 録画中か
        /// </summary>
        /// <value>録画中か</value>
        [DataMember(Name = "isRecording", IsRequired = true, EmitDefaultValue = true)]
        public bool IsRecording { get; set; }

        /// <summary>
        /// Gets or Sets Thumbnails
        /// </summary>
        [DataMember(Name = "thumbnails", EmitDefaultValue = false)]
        public List<int> Thumbnails { get; set; }

        /// <summary>
        /// Gets or Sets VideoFiles
        /// </summary>
        [DataMember(Name = "videoFiles", EmitDefaultValue = false)]
        public List<VideoFile> VideoFiles { get; set; }

        /// <summary>
        /// Gets or Sets DropLog
        /// </summary>
        [DataMember(Name = "dropLog", EmitDefaultValue = false)]
        public DropLogFile DropLog { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<RecordedTag> Tags { get; set; }

        /// <summary>
        /// エンコード中か
        /// </summary>
        /// <value>エンコード中か</value>
        [DataMember(Name = "isEncoding", IsRequired = true, EmitDefaultValue = true)]
        public bool IsEncoding { get; set; }

        /// <summary>
        /// 自動録画削除対象外か
        /// </summary>
        /// <value>自動録画削除対象外か</value>
        [DataMember(Name = "isProtected", IsRequired = true, EmitDefaultValue = true)]
        public bool IsProtected { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecordedItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  ProgramId: ").Append(ProgramId).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  StartAt: ").Append(StartAt).Append("\n");
            sb.Append("  EndAt: ").Append(EndAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Extended: ").Append(Extended).Append("\n");
            sb.Append("  RawExtended: ").Append(RawExtended).Append("\n");
            sb.Append("  Genre1: ").Append(Genre1).Append("\n");
            sb.Append("  SubGenre1: ").Append(SubGenre1).Append("\n");
            sb.Append("  Genre2: ").Append(Genre2).Append("\n");
            sb.Append("  SubGenre2: ").Append(SubGenre2).Append("\n");
            sb.Append("  Genre3: ").Append(Genre3).Append("\n");
            sb.Append("  SubGenre3: ").Append(SubGenre3).Append("\n");
            sb.Append("  VideoType: ").Append(VideoType).Append("\n");
            sb.Append("  VideoResolution: ").Append(VideoResolution).Append("\n");
            sb.Append("  VideoStreamContent: ").Append(VideoStreamContent).Append("\n");
            sb.Append("  VideoComponentType: ").Append(VideoComponentType).Append("\n");
            sb.Append("  AudioSamplingRate: ").Append(AudioSamplingRate).Append("\n");
            sb.Append("  AudioComponentType: ").Append(AudioComponentType).Append("\n");
            sb.Append("  IsRecording: ").Append(IsRecording).Append("\n");
            sb.Append("  Thumbnails: ").Append(Thumbnails).Append("\n");
            sb.Append("  VideoFiles: ").Append(VideoFiles).Append("\n");
            sb.Append("  DropLog: ").Append(DropLog).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  IsEncoding: ").Append(IsEncoding).Append("\n");
            sb.Append("  IsProtected: ").Append(IsProtected).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ProgramId (long) maximum
            if (this.ProgramId > (long)655356553565535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProgramId, must be a value less than or equal to 655356553565535.", new [] { "ProgramId" });
            }

            // ChannelId (long) maximum
            if (this.ChannelId > (long)6553565535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChannelId, must be a value less than or equal to 6553565535.", new [] { "ChannelId" });
            }

            yield break;
        }
    }

}
