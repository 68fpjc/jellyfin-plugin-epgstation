/*
 * epgstation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.6.20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.OpenAPIDateConverter;

namespace X68fpjc.Jellyfin.EPGStation.OpenAPI.Model
{
    /// <summary>
    /// 予約, 除外, 重複, 競合の reserveId のリスト
    /// </summary>
    [DataContract(Name = "ReserveLists")]
    public partial class ReserveLists : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReserveLists" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReserveLists() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReserveLists" /> class.
        /// </summary>
        /// <param name="normal">normal (required).</param>
        /// <param name="conflicts">conflicts (required).</param>
        /// <param name="skips">skips (required).</param>
        /// <param name="overlaps">overlaps (required).</param>
        public ReserveLists(ReserveListItem normal = default, ReserveListItem conflicts = default, ReserveListItem skips = default, ReserveListItem overlaps = default)
        {
            // to ensure "normal" is required (not null)
            if (normal == null)
            {
                throw new ArgumentNullException("normal is a required property for ReserveLists and cannot be null");
            }
            this.Normal = normal;
            // to ensure "conflicts" is required (not null)
            if (conflicts == null)
            {
                throw new ArgumentNullException("conflicts is a required property for ReserveLists and cannot be null");
            }
            this.Conflicts = conflicts;
            // to ensure "skips" is required (not null)
            if (skips == null)
            {
                throw new ArgumentNullException("skips is a required property for ReserveLists and cannot be null");
            }
            this.Skips = skips;
            // to ensure "overlaps" is required (not null)
            if (overlaps == null)
            {
                throw new ArgumentNullException("overlaps is a required property for ReserveLists and cannot be null");
            }
            this.Overlaps = overlaps;
        }

        /// <summary>
        /// Gets or Sets Normal
        /// </summary>
        [DataMember(Name = "normal", IsRequired = true, EmitDefaultValue = true)]
        public ReserveListItem Normal { get; set; }

        /// <summary>
        /// Gets or Sets Conflicts
        /// </summary>
        [DataMember(Name = "conflicts", IsRequired = true, EmitDefaultValue = true)]
        public ReserveListItem Conflicts { get; set; }

        /// <summary>
        /// Gets or Sets Skips
        /// </summary>
        [DataMember(Name = "skips", IsRequired = true, EmitDefaultValue = true)]
        public ReserveListItem Skips { get; set; }

        /// <summary>
        /// Gets or Sets Overlaps
        /// </summary>
        [DataMember(Name = "overlaps", IsRequired = true, EmitDefaultValue = true)]
        public ReserveListItem Overlaps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReserveLists {\n");
            sb.Append("  Normal: ").Append(Normal).Append("\n");
            sb.Append("  Conflicts: ").Append(Conflicts).Append("\n");
            sb.Append("  Skips: ").Append(Skips).Append("\n");
            sb.Append("  Overlaps: ").Append(Overlaps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
