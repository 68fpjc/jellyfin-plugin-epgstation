/*
 * epgstation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.6.20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.OpenAPIDateConverter;

namespace X68fpjc.Jellyfin.EPGStation.OpenAPI.Model
{
    /// <summary>
    /// ストリーミング設定
    /// </summary>
    [DataContract(Name = "Config_streamConfig")]
    public partial class ConfigStreamConfig : IEquatable<ConfigStreamConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigStreamConfig" /> class.
        /// </summary>
        /// <param name="live">live.</param>
        /// <param name="recorded">recorded.</param>
        public ConfigStreamConfig(ConfigStreamConfigLive live = default(ConfigStreamConfigLive), ConfigStreamConfigRecorded recorded = default(ConfigStreamConfigRecorded))
        {
            this.Live = live;
            this.Recorded = recorded;
        }

        /// <summary>
        /// Gets or Sets Live
        /// </summary>
        [DataMember(Name = "live", EmitDefaultValue = false)]
        public ConfigStreamConfigLive Live { get; set; }

        /// <summary>
        /// Gets or Sets Recorded
        /// </summary>
        [DataMember(Name = "recorded", EmitDefaultValue = false)]
        public ConfigStreamConfigRecorded Recorded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConfigStreamConfig {\n");
            sb.Append("  Live: ").Append(Live).Append("\n");
            sb.Append("  Recorded: ").Append(Recorded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConfigStreamConfig);
        }

        /// <summary>
        /// Returns true if ConfigStreamConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of ConfigStreamConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfigStreamConfig input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Live == input.Live ||
                    (this.Live != null &&
                    this.Live.Equals(input.Live))
                ) && 
                (
                    this.Recorded == input.Recorded ||
                    (this.Recorded != null &&
                    this.Recorded.Equals(input.Recorded))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Live != null)
                {
                    hashCode = (hashCode * 59) + this.Live.GetHashCode();
                }
                if (this.Recorded != null)
                {
                    hashCode = (hashCode * 59) + this.Recorded.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
