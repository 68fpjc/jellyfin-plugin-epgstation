/*
 * epgstation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.6.20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.OpenAPIDateConverter;

namespace X68fpjc.Jellyfin.EPGStation.OpenAPI.Model
{
    /// <summary>
    /// 予約番組情報
    /// </summary>
    [DataContract(Name = "ReserveItem")]
    public partial class ReserveItem : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets VideoType
        /// </summary>
        [DataMember(Name = "videoType", EmitDefaultValue = false)]
        public ProgramVideoType? VideoType { get; set; }

        /// <summary>
        /// Gets or Sets VideoResolution
        /// </summary>
        [DataMember(Name = "videoResolution", EmitDefaultValue = false)]
        public ProgramVideoResolution? VideoResolution { get; set; }

        /// <summary>
        /// Gets or Sets AudioSamplingRate
        /// </summary>
        [DataMember(Name = "audioSamplingRate", EmitDefaultValue = false)]
        public ProgramAudioSamplingRate? AudioSamplingRate { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReserveItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReserveItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReserveItem" /> class.
        /// </summary>
        /// <param name="id">予約 id (required).</param>
        /// <param name="ruleId">ルール id.</param>
        /// <param name="isSkip">isSkip (required).</param>
        /// <param name="isConflict">isConflict (required).</param>
        /// <param name="isOverlap">isOverlap (required).</param>
        /// <param name="allowEndLack">allowEndLack (required).</param>
        /// <param name="isTimeSpecified">isTimeSpecified (required).</param>
        /// <param name="tags">tags.</param>
        /// <param name="parentDirectoryName">parentDirectoryName.</param>
        /// <param name="directory">directory.</param>
        /// <param name="recordedFormat">recordedFormat.</param>
        /// <param name="encodeMode1">encodeMode1.</param>
        /// <param name="encodeParentDirectoryName1">encodeParentDirectoryName1.</param>
        /// <param name="encodeDirectory1">encodeDirectory1.</param>
        /// <param name="encodeMode2">encodeMode2.</param>
        /// <param name="encodeParentDirectoryName2">encodeParentDirectoryName2.</param>
        /// <param name="encodeDirectory2">encodeDirectory2.</param>
        /// <param name="encodeMode3">encodeMode3.</param>
        /// <param name="encodeParentDirectoryName3">encodeParentDirectoryName3.</param>
        /// <param name="encodeDirectory3">encodeDirectory3.</param>
        /// <param name="isDeleteOriginalAfterEncode">isDeleteOriginalAfterEncode (required).</param>
        /// <param name="programId">program id.</param>
        /// <param name="channelId">放送局 id (required).</param>
        /// <param name="startAt">時刻 (ms) (required).</param>
        /// <param name="endAt">時刻 (ms) (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="extended">extended.</param>
        /// <param name="rawExtended">rawExtended.</param>
        /// <param name="genre1">ジャンル.</param>
        /// <param name="subGenre1">サブジャンル.</param>
        /// <param name="genre2">ジャンル.</param>
        /// <param name="subGenre2">サブジャンル.</param>
        /// <param name="genre3">ジャンル.</param>
        /// <param name="subGenre3">サブジャンル.</param>
        /// <param name="videoType">videoType.</param>
        /// <param name="videoResolution">videoResolution.</param>
        /// <param name="videoStreamContent">videoStreamContent.</param>
        /// <param name="videoComponentType">videoComponentType.</param>
        /// <param name="audioSamplingRate">audioSamplingRate.</param>
        /// <param name="audioComponentType">audioComponentType.</param>
        public ReserveItem(int id = default, int ruleId = default, bool isSkip = default, bool isConflict = default, bool isOverlap = default, bool allowEndLack = default, bool isTimeSpecified = default, List<int> tags = default, string parentDirectoryName = default, string directory = default, string recordedFormat = default, int encodeMode1 = default, string encodeParentDirectoryName1 = default, string encodeDirectory1 = default, int encodeMode2 = default, string encodeParentDirectoryName2 = default, string encodeDirectory2 = default, int encodeMode3 = default, string encodeParentDirectoryName3 = default, int encodeDirectory3 = default, bool isDeleteOriginalAfterEncode = default, long programId = default, long channelId = default, long startAt = default, long endAt = default, string name = default, string description = default, string extended = default, Object rawExtended = default, int genre1 = default, int subGenre1 = default, int genre2 = default, int subGenre2 = default, int genre3 = default, int subGenre3 = default, ProgramVideoType? videoType = default, ProgramVideoResolution? videoResolution = default, int videoStreamContent = default, int videoComponentType = default, ProgramAudioSamplingRate? audioSamplingRate = default, int audioComponentType = default)
        {
            this.Id = id;
            this.IsSkip = isSkip;
            this.IsConflict = isConflict;
            this.IsOverlap = isOverlap;
            this.AllowEndLack = allowEndLack;
            this.IsTimeSpecified = isTimeSpecified;
            this.IsDeleteOriginalAfterEncode = isDeleteOriginalAfterEncode;
            this.ChannelId = channelId;
            this.StartAt = startAt;
            this.EndAt = endAt;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ReserveItem and cannot be null");
            }
            this.Name = name;
            this.RuleId = ruleId;
            this.Tags = tags;
            this.ParentDirectoryName = parentDirectoryName;
            this.Directory = directory;
            this.RecordedFormat = recordedFormat;
            this.EncodeMode1 = encodeMode1;
            this.EncodeParentDirectoryName1 = encodeParentDirectoryName1;
            this.EncodeDirectory1 = encodeDirectory1;
            this.EncodeMode2 = encodeMode2;
            this.EncodeParentDirectoryName2 = encodeParentDirectoryName2;
            this.EncodeDirectory2 = encodeDirectory2;
            this.EncodeMode3 = encodeMode3;
            this.EncodeParentDirectoryName3 = encodeParentDirectoryName3;
            this.EncodeDirectory3 = encodeDirectory3;
            this.ProgramId = programId;
            this.Description = description;
            this.Extended = extended;
            this.RawExtended = rawExtended;
            this.Genre1 = genre1;
            this.SubGenre1 = subGenre1;
            this.Genre2 = genre2;
            this.SubGenre2 = subGenre2;
            this.Genre3 = genre3;
            this.SubGenre3 = subGenre3;
            this.VideoType = videoType;
            this.VideoResolution = videoResolution;
            this.VideoStreamContent = videoStreamContent;
            this.VideoComponentType = videoComponentType;
            this.AudioSamplingRate = audioSamplingRate;
            this.AudioComponentType = audioComponentType;
        }

        /// <summary>
        /// 予約 id
        /// </summary>
        /// <value>予約 id</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// ルール id
        /// </summary>
        /// <value>ルール id</value>
        [DataMember(Name = "ruleId", EmitDefaultValue = false)]
        public int RuleId { get; set; }

        /// <summary>
        /// Gets or Sets IsSkip
        /// </summary>
        [DataMember(Name = "isSkip", IsRequired = true, EmitDefaultValue = true)]
        public bool IsSkip { get; set; }

        /// <summary>
        /// Gets or Sets IsConflict
        /// </summary>
        [DataMember(Name = "isConflict", IsRequired = true, EmitDefaultValue = true)]
        public bool IsConflict { get; set; }

        /// <summary>
        /// Gets or Sets IsOverlap
        /// </summary>
        [DataMember(Name = "isOverlap", IsRequired = true, EmitDefaultValue = true)]
        public bool IsOverlap { get; set; }

        /// <summary>
        /// Gets or Sets AllowEndLack
        /// </summary>
        [DataMember(Name = "allowEndLack", IsRequired = true, EmitDefaultValue = true)]
        public bool AllowEndLack { get; set; }

        /// <summary>
        /// Gets or Sets IsTimeSpecified
        /// </summary>
        [DataMember(Name = "isTimeSpecified", IsRequired = true, EmitDefaultValue = true)]
        public bool IsTimeSpecified { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<int> Tags { get; set; }

        /// <summary>
        /// Gets or Sets ParentDirectoryName
        /// </summary>
        [DataMember(Name = "parentDirectoryName", EmitDefaultValue = false)]
        public string ParentDirectoryName { get; set; }

        /// <summary>
        /// Gets or Sets Directory
        /// </summary>
        [DataMember(Name = "directory", EmitDefaultValue = false)]
        public string Directory { get; set; }

        /// <summary>
        /// Gets or Sets RecordedFormat
        /// </summary>
        [DataMember(Name = "recordedFormat", EmitDefaultValue = false)]
        public string RecordedFormat { get; set; }

        /// <summary>
        /// Gets or Sets EncodeMode1
        /// </summary>
        [DataMember(Name = "encodeMode1", EmitDefaultValue = false)]
        public int EncodeMode1 { get; set; }

        /// <summary>
        /// Gets or Sets EncodeParentDirectoryName1
        /// </summary>
        [DataMember(Name = "encodeParentDirectoryName1", EmitDefaultValue = false)]
        public string EncodeParentDirectoryName1 { get; set; }

        /// <summary>
        /// Gets or Sets EncodeDirectory1
        /// </summary>
        [DataMember(Name = "encodeDirectory1", EmitDefaultValue = false)]
        public string EncodeDirectory1 { get; set; }

        /// <summary>
        /// Gets or Sets EncodeMode2
        /// </summary>
        [DataMember(Name = "encodeMode2", EmitDefaultValue = false)]
        public int EncodeMode2 { get; set; }

        /// <summary>
        /// Gets or Sets EncodeParentDirectoryName2
        /// </summary>
        [DataMember(Name = "encodeParentDirectoryName2", EmitDefaultValue = false)]
        public string EncodeParentDirectoryName2 { get; set; }

        /// <summary>
        /// Gets or Sets EncodeDirectory2
        /// </summary>
        [DataMember(Name = "encodeDirectory2", EmitDefaultValue = false)]
        public string EncodeDirectory2 { get; set; }

        /// <summary>
        /// Gets or Sets EncodeMode3
        /// </summary>
        [DataMember(Name = "encodeMode3", EmitDefaultValue = false)]
        public int EncodeMode3 { get; set; }

        /// <summary>
        /// Gets or Sets EncodeParentDirectoryName3
        /// </summary>
        [DataMember(Name = "encodeParentDirectoryName3", EmitDefaultValue = false)]
        public string EncodeParentDirectoryName3 { get; set; }

        /// <summary>
        /// Gets or Sets EncodeDirectory3
        /// </summary>
        [DataMember(Name = "encodeDirectory3", EmitDefaultValue = false)]
        public int EncodeDirectory3 { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleteOriginalAfterEncode
        /// </summary>
        [DataMember(Name = "isDeleteOriginalAfterEncode", IsRequired = true, EmitDefaultValue = true)]
        public bool IsDeleteOriginalAfterEncode { get; set; }

        /// <summary>
        /// program id
        /// </summary>
        /// <value>program id</value>
        [DataMember(Name = "programId", EmitDefaultValue = false)]
        public long ProgramId { get; set; }

        /// <summary>
        /// 放送局 id
        /// </summary>
        /// <value>放送局 id</value>
        [DataMember(Name = "channelId", IsRequired = true, EmitDefaultValue = true)]
        public long ChannelId { get; set; }

        /// <summary>
        /// 時刻 (ms)
        /// </summary>
        /// <value>時刻 (ms)</value>
        [DataMember(Name = "startAt", IsRequired = true, EmitDefaultValue = true)]
        public long StartAt { get; set; }

        /// <summary>
        /// 時刻 (ms)
        /// </summary>
        /// <value>時刻 (ms)</value>
        [DataMember(Name = "endAt", IsRequired = true, EmitDefaultValue = true)]
        public long EndAt { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Extended
        /// </summary>
        [DataMember(Name = "extended", EmitDefaultValue = false)]
        public string Extended { get; set; }

        /// <summary>
        /// Gets or Sets RawExtended
        /// </summary>
        [DataMember(Name = "rawExtended", EmitDefaultValue = false)]
        public Object RawExtended { get; set; }

        /// <summary>
        /// ジャンル
        /// </summary>
        /// <value>ジャンル</value>
        [DataMember(Name = "genre1", EmitDefaultValue = false)]
        public int Genre1 { get; set; }

        /// <summary>
        /// サブジャンル
        /// </summary>
        /// <value>サブジャンル</value>
        [DataMember(Name = "subGenre1", EmitDefaultValue = false)]
        public int SubGenre1 { get; set; }

        /// <summary>
        /// ジャンル
        /// </summary>
        /// <value>ジャンル</value>
        [DataMember(Name = "genre2", EmitDefaultValue = false)]
        public int Genre2 { get; set; }

        /// <summary>
        /// サブジャンル
        /// </summary>
        /// <value>サブジャンル</value>
        [DataMember(Name = "subGenre2", EmitDefaultValue = false)]
        public int SubGenre2 { get; set; }

        /// <summary>
        /// ジャンル
        /// </summary>
        /// <value>ジャンル</value>
        [DataMember(Name = "genre3", EmitDefaultValue = false)]
        public int Genre3 { get; set; }

        /// <summary>
        /// サブジャンル
        /// </summary>
        /// <value>サブジャンル</value>
        [DataMember(Name = "subGenre3", EmitDefaultValue = false)]
        public int SubGenre3 { get; set; }

        /// <summary>
        /// Gets or Sets VideoStreamContent
        /// </summary>
        [DataMember(Name = "videoStreamContent", EmitDefaultValue = false)]
        public int VideoStreamContent { get; set; }

        /// <summary>
        /// Gets or Sets VideoComponentType
        /// </summary>
        [DataMember(Name = "videoComponentType", EmitDefaultValue = false)]
        public int VideoComponentType { get; set; }

        /// <summary>
        /// Gets or Sets AudioComponentType
        /// </summary>
        [DataMember(Name = "audioComponentType", EmitDefaultValue = false)]
        public int AudioComponentType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReserveItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  IsSkip: ").Append(IsSkip).Append("\n");
            sb.Append("  IsConflict: ").Append(IsConflict).Append("\n");
            sb.Append("  IsOverlap: ").Append(IsOverlap).Append("\n");
            sb.Append("  AllowEndLack: ").Append(AllowEndLack).Append("\n");
            sb.Append("  IsTimeSpecified: ").Append(IsTimeSpecified).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  ParentDirectoryName: ").Append(ParentDirectoryName).Append("\n");
            sb.Append("  Directory: ").Append(Directory).Append("\n");
            sb.Append("  RecordedFormat: ").Append(RecordedFormat).Append("\n");
            sb.Append("  EncodeMode1: ").Append(EncodeMode1).Append("\n");
            sb.Append("  EncodeParentDirectoryName1: ").Append(EncodeParentDirectoryName1).Append("\n");
            sb.Append("  EncodeDirectory1: ").Append(EncodeDirectory1).Append("\n");
            sb.Append("  EncodeMode2: ").Append(EncodeMode2).Append("\n");
            sb.Append("  EncodeParentDirectoryName2: ").Append(EncodeParentDirectoryName2).Append("\n");
            sb.Append("  EncodeDirectory2: ").Append(EncodeDirectory2).Append("\n");
            sb.Append("  EncodeMode3: ").Append(EncodeMode3).Append("\n");
            sb.Append("  EncodeParentDirectoryName3: ").Append(EncodeParentDirectoryName3).Append("\n");
            sb.Append("  EncodeDirectory3: ").Append(EncodeDirectory3).Append("\n");
            sb.Append("  IsDeleteOriginalAfterEncode: ").Append(IsDeleteOriginalAfterEncode).Append("\n");
            sb.Append("  ProgramId: ").Append(ProgramId).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  StartAt: ").Append(StartAt).Append("\n");
            sb.Append("  EndAt: ").Append(EndAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Extended: ").Append(Extended).Append("\n");
            sb.Append("  RawExtended: ").Append(RawExtended).Append("\n");
            sb.Append("  Genre1: ").Append(Genre1).Append("\n");
            sb.Append("  SubGenre1: ").Append(SubGenre1).Append("\n");
            sb.Append("  Genre2: ").Append(Genre2).Append("\n");
            sb.Append("  SubGenre2: ").Append(SubGenre2).Append("\n");
            sb.Append("  Genre3: ").Append(Genre3).Append("\n");
            sb.Append("  SubGenre3: ").Append(SubGenre3).Append("\n");
            sb.Append("  VideoType: ").Append(VideoType).Append("\n");
            sb.Append("  VideoResolution: ").Append(VideoResolution).Append("\n");
            sb.Append("  VideoStreamContent: ").Append(VideoStreamContent).Append("\n");
            sb.Append("  VideoComponentType: ").Append(VideoComponentType).Append("\n");
            sb.Append("  AudioSamplingRate: ").Append(AudioSamplingRate).Append("\n");
            sb.Append("  AudioComponentType: ").Append(AudioComponentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ProgramId (long) maximum
            if (this.ProgramId > (long)655356553565535)
            {
                yield return new ValidationResult("Invalid value for ProgramId, must be a value less than or equal to 655356553565535.", new [] { "ProgramId" });
            }

            // ChannelId (long) maximum
            if (this.ChannelId > (long)6553565535)
            {
                yield return new ValidationResult("Invalid value for ChannelId, must be a value less than or equal to 6553565535.", new [] { "ChannelId" });
            }

            yield break;
        }
    }

}
