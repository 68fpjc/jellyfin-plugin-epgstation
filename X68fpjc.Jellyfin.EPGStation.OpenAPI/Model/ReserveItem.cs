/*
 * epgstation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.6.20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.OpenAPIDateConverter;

namespace X68fpjc.Jellyfin.EPGStation.OpenAPI.Model
{
    /// <summary>
    /// 予約番組情報
    /// </summary>
    [DataContract(Name = "ReserveItem")]
    public partial class ReserveItem : IEquatable<ReserveItem>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets VideoType
        /// </summary>
        [DataMember(Name = "videoType", EmitDefaultValue = false)]
        public ProgramVideoType? VideoType { get; set; }

        /// <summary>
        /// Gets or Sets VideoResolution
        /// </summary>
        [DataMember(Name = "videoResolution", EmitDefaultValue = false)]
        public ProgramVideoResolution? VideoResolution { get; set; }

        /// <summary>
        /// Gets or Sets AudioSamplingRate
        /// </summary>
        [DataMember(Name = "audioSamplingRate", EmitDefaultValue = false)]
        public ProgramAudioSamplingRate? AudioSamplingRate { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReserveItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReserveItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReserveItem" /> class.
        /// </summary>
        /// <param name="id">予約 id (required).</param>
        /// <param name="ruleId">ルール id.</param>
        /// <param name="isSkip">isSkip (required).</param>
        /// <param name="isConflict">isConflict (required).</param>
        /// <param name="isOverlap">isOverlap (required).</param>
        /// <param name="allowEndLack">allowEndLack (required).</param>
        /// <param name="isTimeSpecified">isTimeSpecified (required).</param>
        /// <param name="tags">tags.</param>
        /// <param name="parentDirectoryName">parentDirectoryName.</param>
        /// <param name="directory">directory.</param>
        /// <param name="recordedFormat">recordedFormat.</param>
        /// <param name="encodeMode1">encodeMode1.</param>
        /// <param name="encodeParentDirectoryName1">encodeParentDirectoryName1.</param>
        /// <param name="encodeDirectory1">encodeDirectory1.</param>
        /// <param name="encodeMode2">encodeMode2.</param>
        /// <param name="encodeParentDirectoryName2">encodeParentDirectoryName2.</param>
        /// <param name="encodeDirectory2">encodeDirectory2.</param>
        /// <param name="encodeMode3">encodeMode3.</param>
        /// <param name="encodeParentDirectoryName3">encodeParentDirectoryName3.</param>
        /// <param name="encodeDirectory3">encodeDirectory3.</param>
        /// <param name="isDeleteOriginalAfterEncode">isDeleteOriginalAfterEncode (required).</param>
        /// <param name="programId">program id.</param>
        /// <param name="channelId">放送局 id (required).</param>
        /// <param name="startAt">時刻 (ms) (required).</param>
        /// <param name="endAt">時刻 (ms) (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="extended">extended.</param>
        /// <param name="rawExtended">rawExtended.</param>
        /// <param name="genre1">ジャンル.</param>
        /// <param name="subGenre1">サブジャンル.</param>
        /// <param name="genre2">ジャンル.</param>
        /// <param name="subGenre2">サブジャンル.</param>
        /// <param name="genre3">ジャンル.</param>
        /// <param name="subGenre3">サブジャンル.</param>
        /// <param name="videoType">videoType.</param>
        /// <param name="videoResolution">videoResolution.</param>
        /// <param name="videoStreamContent">videoStreamContent.</param>
        /// <param name="videoComponentType">videoComponentType.</param>
        /// <param name="audioSamplingRate">audioSamplingRate.</param>
        /// <param name="audioComponentType">audioComponentType.</param>
        public ReserveItem(int id = default(int), int ruleId = default(int), bool isSkip = default(bool), bool isConflict = default(bool), bool isOverlap = default(bool), bool allowEndLack = default(bool), bool isTimeSpecified = default(bool), List<int> tags = default(List<int>), string parentDirectoryName = default(string), string directory = default(string), string recordedFormat = default(string), int encodeMode1 = default(int), string encodeParentDirectoryName1 = default(string), string encodeDirectory1 = default(string), int encodeMode2 = default(int), string encodeParentDirectoryName2 = default(string), string encodeDirectory2 = default(string), int encodeMode3 = default(int), string encodeParentDirectoryName3 = default(string), int encodeDirectory3 = default(int), bool isDeleteOriginalAfterEncode = default(bool), long programId = default(long), long channelId = default(long), long startAt = default(long), long endAt = default(long), string name = default(string), string description = default(string), string extended = default(string), Object rawExtended = default(Object), int genre1 = default(int), int subGenre1 = default(int), int genre2 = default(int), int subGenre2 = default(int), int genre3 = default(int), int subGenre3 = default(int), ProgramVideoType? videoType = default(ProgramVideoType?), ProgramVideoResolution? videoResolution = default(ProgramVideoResolution?), int videoStreamContent = default(int), int videoComponentType = default(int), ProgramAudioSamplingRate? audioSamplingRate = default(ProgramAudioSamplingRate?), int audioComponentType = default(int))
        {
            this.Id = id;
            this.IsSkip = isSkip;
            this.IsConflict = isConflict;
            this.IsOverlap = isOverlap;
            this.AllowEndLack = allowEndLack;
            this.IsTimeSpecified = isTimeSpecified;
            this.IsDeleteOriginalAfterEncode = isDeleteOriginalAfterEncode;
            this.ChannelId = channelId;
            this.StartAt = startAt;
            this.EndAt = endAt;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ReserveItem and cannot be null");
            }
            this.Name = name;
            this.RuleId = ruleId;
            this.Tags = tags;
            this.ParentDirectoryName = parentDirectoryName;
            this.Directory = directory;
            this.RecordedFormat = recordedFormat;
            this.EncodeMode1 = encodeMode1;
            this.EncodeParentDirectoryName1 = encodeParentDirectoryName1;
            this.EncodeDirectory1 = encodeDirectory1;
            this.EncodeMode2 = encodeMode2;
            this.EncodeParentDirectoryName2 = encodeParentDirectoryName2;
            this.EncodeDirectory2 = encodeDirectory2;
            this.EncodeMode3 = encodeMode3;
            this.EncodeParentDirectoryName3 = encodeParentDirectoryName3;
            this.EncodeDirectory3 = encodeDirectory3;
            this.ProgramId = programId;
            this.Description = description;
            this.Extended = extended;
            this.RawExtended = rawExtended;
            this.Genre1 = genre1;
            this.SubGenre1 = subGenre1;
            this.Genre2 = genre2;
            this.SubGenre2 = subGenre2;
            this.Genre3 = genre3;
            this.SubGenre3 = subGenre3;
            this.VideoType = videoType;
            this.VideoResolution = videoResolution;
            this.VideoStreamContent = videoStreamContent;
            this.VideoComponentType = videoComponentType;
            this.AudioSamplingRate = audioSamplingRate;
            this.AudioComponentType = audioComponentType;
        }

        /// <summary>
        /// 予約 id
        /// </summary>
        /// <value>予約 id</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// ルール id
        /// </summary>
        /// <value>ルール id</value>
        [DataMember(Name = "ruleId", EmitDefaultValue = false)]
        public int RuleId { get; set; }

        /// <summary>
        /// Gets or Sets IsSkip
        /// </summary>
        [DataMember(Name = "isSkip", IsRequired = true, EmitDefaultValue = true)]
        public bool IsSkip { get; set; }

        /// <summary>
        /// Gets or Sets IsConflict
        /// </summary>
        [DataMember(Name = "isConflict", IsRequired = true, EmitDefaultValue = true)]
        public bool IsConflict { get; set; }

        /// <summary>
        /// Gets or Sets IsOverlap
        /// </summary>
        [DataMember(Name = "isOverlap", IsRequired = true, EmitDefaultValue = true)]
        public bool IsOverlap { get; set; }

        /// <summary>
        /// Gets or Sets AllowEndLack
        /// </summary>
        [DataMember(Name = "allowEndLack", IsRequired = true, EmitDefaultValue = true)]
        public bool AllowEndLack { get; set; }

        /// <summary>
        /// Gets or Sets IsTimeSpecified
        /// </summary>
        [DataMember(Name = "isTimeSpecified", IsRequired = true, EmitDefaultValue = true)]
        public bool IsTimeSpecified { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<int> Tags { get; set; }

        /// <summary>
        /// Gets or Sets ParentDirectoryName
        /// </summary>
        [DataMember(Name = "parentDirectoryName", EmitDefaultValue = false)]
        public string ParentDirectoryName { get; set; }

        /// <summary>
        /// Gets or Sets Directory
        /// </summary>
        [DataMember(Name = "directory", EmitDefaultValue = false)]
        public string Directory { get; set; }

        /// <summary>
        /// Gets or Sets RecordedFormat
        /// </summary>
        [DataMember(Name = "recordedFormat", EmitDefaultValue = false)]
        public string RecordedFormat { get; set; }

        /// <summary>
        /// Gets or Sets EncodeMode1
        /// </summary>
        [DataMember(Name = "encodeMode1", EmitDefaultValue = false)]
        public int EncodeMode1 { get; set; }

        /// <summary>
        /// Gets or Sets EncodeParentDirectoryName1
        /// </summary>
        [DataMember(Name = "encodeParentDirectoryName1", EmitDefaultValue = false)]
        public string EncodeParentDirectoryName1 { get; set; }

        /// <summary>
        /// Gets or Sets EncodeDirectory1
        /// </summary>
        [DataMember(Name = "encodeDirectory1", EmitDefaultValue = false)]
        public string EncodeDirectory1 { get; set; }

        /// <summary>
        /// Gets or Sets EncodeMode2
        /// </summary>
        [DataMember(Name = "encodeMode2", EmitDefaultValue = false)]
        public int EncodeMode2 { get; set; }

        /// <summary>
        /// Gets or Sets EncodeParentDirectoryName2
        /// </summary>
        [DataMember(Name = "encodeParentDirectoryName2", EmitDefaultValue = false)]
        public string EncodeParentDirectoryName2 { get; set; }

        /// <summary>
        /// Gets or Sets EncodeDirectory2
        /// </summary>
        [DataMember(Name = "encodeDirectory2", EmitDefaultValue = false)]
        public string EncodeDirectory2 { get; set; }

        /// <summary>
        /// Gets or Sets EncodeMode3
        /// </summary>
        [DataMember(Name = "encodeMode3", EmitDefaultValue = false)]
        public int EncodeMode3 { get; set; }

        /// <summary>
        /// Gets or Sets EncodeParentDirectoryName3
        /// </summary>
        [DataMember(Name = "encodeParentDirectoryName3", EmitDefaultValue = false)]
        public string EncodeParentDirectoryName3 { get; set; }

        /// <summary>
        /// Gets or Sets EncodeDirectory3
        /// </summary>
        [DataMember(Name = "encodeDirectory3", EmitDefaultValue = false)]
        public int EncodeDirectory3 { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleteOriginalAfterEncode
        /// </summary>
        [DataMember(Name = "isDeleteOriginalAfterEncode", IsRequired = true, EmitDefaultValue = true)]
        public bool IsDeleteOriginalAfterEncode { get; set; }

        /// <summary>
        /// program id
        /// </summary>
        /// <value>program id</value>
        [DataMember(Name = "programId", EmitDefaultValue = false)]
        public long ProgramId { get; set; }

        /// <summary>
        /// 放送局 id
        /// </summary>
        /// <value>放送局 id</value>
        [DataMember(Name = "channelId", IsRequired = true, EmitDefaultValue = false)]
        public long ChannelId { get; set; }

        /// <summary>
        /// 時刻 (ms)
        /// </summary>
        /// <value>時刻 (ms)</value>
        [DataMember(Name = "startAt", IsRequired = true, EmitDefaultValue = false)]
        public long StartAt { get; set; }

        /// <summary>
        /// 時刻 (ms)
        /// </summary>
        /// <value>時刻 (ms)</value>
        [DataMember(Name = "endAt", IsRequired = true, EmitDefaultValue = false)]
        public long EndAt { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Extended
        /// </summary>
        [DataMember(Name = "extended", EmitDefaultValue = false)]
        public string Extended { get; set; }

        /// <summary>
        /// Gets or Sets RawExtended
        /// </summary>
        [DataMember(Name = "rawExtended", EmitDefaultValue = false)]
        public Object RawExtended { get; set; }

        /// <summary>
        /// ジャンル
        /// </summary>
        /// <value>ジャンル</value>
        [DataMember(Name = "genre1", EmitDefaultValue = false)]
        public int Genre1 { get; set; }

        /// <summary>
        /// サブジャンル
        /// </summary>
        /// <value>サブジャンル</value>
        [DataMember(Name = "subGenre1", EmitDefaultValue = false)]
        public int SubGenre1 { get; set; }

        /// <summary>
        /// ジャンル
        /// </summary>
        /// <value>ジャンル</value>
        [DataMember(Name = "genre2", EmitDefaultValue = false)]
        public int Genre2 { get; set; }

        /// <summary>
        /// サブジャンル
        /// </summary>
        /// <value>サブジャンル</value>
        [DataMember(Name = "subGenre2", EmitDefaultValue = false)]
        public int SubGenre2 { get; set; }

        /// <summary>
        /// ジャンル
        /// </summary>
        /// <value>ジャンル</value>
        [DataMember(Name = "genre3", EmitDefaultValue = false)]
        public int Genre3 { get; set; }

        /// <summary>
        /// サブジャンル
        /// </summary>
        /// <value>サブジャンル</value>
        [DataMember(Name = "subGenre3", EmitDefaultValue = false)]
        public int SubGenre3 { get; set; }

        /// <summary>
        /// Gets or Sets VideoStreamContent
        /// </summary>
        [DataMember(Name = "videoStreamContent", EmitDefaultValue = false)]
        public int VideoStreamContent { get; set; }

        /// <summary>
        /// Gets or Sets VideoComponentType
        /// </summary>
        [DataMember(Name = "videoComponentType", EmitDefaultValue = false)]
        public int VideoComponentType { get; set; }

        /// <summary>
        /// Gets or Sets AudioComponentType
        /// </summary>
        [DataMember(Name = "audioComponentType", EmitDefaultValue = false)]
        public int AudioComponentType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReserveItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  IsSkip: ").Append(IsSkip).Append("\n");
            sb.Append("  IsConflict: ").Append(IsConflict).Append("\n");
            sb.Append("  IsOverlap: ").Append(IsOverlap).Append("\n");
            sb.Append("  AllowEndLack: ").Append(AllowEndLack).Append("\n");
            sb.Append("  IsTimeSpecified: ").Append(IsTimeSpecified).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  ParentDirectoryName: ").Append(ParentDirectoryName).Append("\n");
            sb.Append("  Directory: ").Append(Directory).Append("\n");
            sb.Append("  RecordedFormat: ").Append(RecordedFormat).Append("\n");
            sb.Append("  EncodeMode1: ").Append(EncodeMode1).Append("\n");
            sb.Append("  EncodeParentDirectoryName1: ").Append(EncodeParentDirectoryName1).Append("\n");
            sb.Append("  EncodeDirectory1: ").Append(EncodeDirectory1).Append("\n");
            sb.Append("  EncodeMode2: ").Append(EncodeMode2).Append("\n");
            sb.Append("  EncodeParentDirectoryName2: ").Append(EncodeParentDirectoryName2).Append("\n");
            sb.Append("  EncodeDirectory2: ").Append(EncodeDirectory2).Append("\n");
            sb.Append("  EncodeMode3: ").Append(EncodeMode3).Append("\n");
            sb.Append("  EncodeParentDirectoryName3: ").Append(EncodeParentDirectoryName3).Append("\n");
            sb.Append("  EncodeDirectory3: ").Append(EncodeDirectory3).Append("\n");
            sb.Append("  IsDeleteOriginalAfterEncode: ").Append(IsDeleteOriginalAfterEncode).Append("\n");
            sb.Append("  ProgramId: ").Append(ProgramId).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  StartAt: ").Append(StartAt).Append("\n");
            sb.Append("  EndAt: ").Append(EndAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Extended: ").Append(Extended).Append("\n");
            sb.Append("  RawExtended: ").Append(RawExtended).Append("\n");
            sb.Append("  Genre1: ").Append(Genre1).Append("\n");
            sb.Append("  SubGenre1: ").Append(SubGenre1).Append("\n");
            sb.Append("  Genre2: ").Append(Genre2).Append("\n");
            sb.Append("  SubGenre2: ").Append(SubGenre2).Append("\n");
            sb.Append("  Genre3: ").Append(Genre3).Append("\n");
            sb.Append("  SubGenre3: ").Append(SubGenre3).Append("\n");
            sb.Append("  VideoType: ").Append(VideoType).Append("\n");
            sb.Append("  VideoResolution: ").Append(VideoResolution).Append("\n");
            sb.Append("  VideoStreamContent: ").Append(VideoStreamContent).Append("\n");
            sb.Append("  VideoComponentType: ").Append(VideoComponentType).Append("\n");
            sb.Append("  AudioSamplingRate: ").Append(AudioSamplingRate).Append("\n");
            sb.Append("  AudioComponentType: ").Append(AudioComponentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReserveItem);
        }

        /// <summary>
        /// Returns true if ReserveItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ReserveItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReserveItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.RuleId == input.RuleId ||
                    this.RuleId.Equals(input.RuleId)
                ) && 
                (
                    this.IsSkip == input.IsSkip ||
                    this.IsSkip.Equals(input.IsSkip)
                ) && 
                (
                    this.IsConflict == input.IsConflict ||
                    this.IsConflict.Equals(input.IsConflict)
                ) && 
                (
                    this.IsOverlap == input.IsOverlap ||
                    this.IsOverlap.Equals(input.IsOverlap)
                ) && 
                (
                    this.AllowEndLack == input.AllowEndLack ||
                    this.AllowEndLack.Equals(input.AllowEndLack)
                ) && 
                (
                    this.IsTimeSpecified == input.IsTimeSpecified ||
                    this.IsTimeSpecified.Equals(input.IsTimeSpecified)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.ParentDirectoryName == input.ParentDirectoryName ||
                    (this.ParentDirectoryName != null &&
                    this.ParentDirectoryName.Equals(input.ParentDirectoryName))
                ) && 
                (
                    this.Directory == input.Directory ||
                    (this.Directory != null &&
                    this.Directory.Equals(input.Directory))
                ) && 
                (
                    this.RecordedFormat == input.RecordedFormat ||
                    (this.RecordedFormat != null &&
                    this.RecordedFormat.Equals(input.RecordedFormat))
                ) && 
                (
                    this.EncodeMode1 == input.EncodeMode1 ||
                    this.EncodeMode1.Equals(input.EncodeMode1)
                ) && 
                (
                    this.EncodeParentDirectoryName1 == input.EncodeParentDirectoryName1 ||
                    (this.EncodeParentDirectoryName1 != null &&
                    this.EncodeParentDirectoryName1.Equals(input.EncodeParentDirectoryName1))
                ) && 
                (
                    this.EncodeDirectory1 == input.EncodeDirectory1 ||
                    (this.EncodeDirectory1 != null &&
                    this.EncodeDirectory1.Equals(input.EncodeDirectory1))
                ) && 
                (
                    this.EncodeMode2 == input.EncodeMode2 ||
                    this.EncodeMode2.Equals(input.EncodeMode2)
                ) && 
                (
                    this.EncodeParentDirectoryName2 == input.EncodeParentDirectoryName2 ||
                    (this.EncodeParentDirectoryName2 != null &&
                    this.EncodeParentDirectoryName2.Equals(input.EncodeParentDirectoryName2))
                ) && 
                (
                    this.EncodeDirectory2 == input.EncodeDirectory2 ||
                    (this.EncodeDirectory2 != null &&
                    this.EncodeDirectory2.Equals(input.EncodeDirectory2))
                ) && 
                (
                    this.EncodeMode3 == input.EncodeMode3 ||
                    this.EncodeMode3.Equals(input.EncodeMode3)
                ) && 
                (
                    this.EncodeParentDirectoryName3 == input.EncodeParentDirectoryName3 ||
                    (this.EncodeParentDirectoryName3 != null &&
                    this.EncodeParentDirectoryName3.Equals(input.EncodeParentDirectoryName3))
                ) && 
                (
                    this.EncodeDirectory3 == input.EncodeDirectory3 ||
                    this.EncodeDirectory3.Equals(input.EncodeDirectory3)
                ) && 
                (
                    this.IsDeleteOriginalAfterEncode == input.IsDeleteOriginalAfterEncode ||
                    this.IsDeleteOriginalAfterEncode.Equals(input.IsDeleteOriginalAfterEncode)
                ) && 
                (
                    this.ProgramId == input.ProgramId ||
                    this.ProgramId.Equals(input.ProgramId)
                ) && 
                (
                    this.ChannelId == input.ChannelId ||
                    this.ChannelId.Equals(input.ChannelId)
                ) && 
                (
                    this.StartAt == input.StartAt ||
                    this.StartAt.Equals(input.StartAt)
                ) && 
                (
                    this.EndAt == input.EndAt ||
                    this.EndAt.Equals(input.EndAt)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Extended == input.Extended ||
                    (this.Extended != null &&
                    this.Extended.Equals(input.Extended))
                ) && 
                (
                    this.RawExtended == input.RawExtended ||
                    (this.RawExtended != null &&
                    this.RawExtended.Equals(input.RawExtended))
                ) && 
                (
                    this.Genre1 == input.Genre1 ||
                    this.Genre1.Equals(input.Genre1)
                ) && 
                (
                    this.SubGenre1 == input.SubGenre1 ||
                    this.SubGenre1.Equals(input.SubGenre1)
                ) && 
                (
                    this.Genre2 == input.Genre2 ||
                    this.Genre2.Equals(input.Genre2)
                ) && 
                (
                    this.SubGenre2 == input.SubGenre2 ||
                    this.SubGenre2.Equals(input.SubGenre2)
                ) && 
                (
                    this.Genre3 == input.Genre3 ||
                    this.Genre3.Equals(input.Genre3)
                ) && 
                (
                    this.SubGenre3 == input.SubGenre3 ||
                    this.SubGenre3.Equals(input.SubGenre3)
                ) && 
                (
                    this.VideoType == input.VideoType ||
                    this.VideoType.Equals(input.VideoType)
                ) && 
                (
                    this.VideoResolution == input.VideoResolution ||
                    this.VideoResolution.Equals(input.VideoResolution)
                ) && 
                (
                    this.VideoStreamContent == input.VideoStreamContent ||
                    this.VideoStreamContent.Equals(input.VideoStreamContent)
                ) && 
                (
                    this.VideoComponentType == input.VideoComponentType ||
                    this.VideoComponentType.Equals(input.VideoComponentType)
                ) && 
                (
                    this.AudioSamplingRate == input.AudioSamplingRate ||
                    this.AudioSamplingRate.Equals(input.AudioSamplingRate)
                ) && 
                (
                    this.AudioComponentType == input.AudioComponentType ||
                    this.AudioComponentType.Equals(input.AudioComponentType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.RuleId.GetHashCode();
                hashCode = (hashCode * 59) + this.IsSkip.GetHashCode();
                hashCode = (hashCode * 59) + this.IsConflict.GetHashCode();
                hashCode = (hashCode * 59) + this.IsOverlap.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowEndLack.GetHashCode();
                hashCode = (hashCode * 59) + this.IsTimeSpecified.GetHashCode();
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.ParentDirectoryName != null)
                {
                    hashCode = (hashCode * 59) + this.ParentDirectoryName.GetHashCode();
                }
                if (this.Directory != null)
                {
                    hashCode = (hashCode * 59) + this.Directory.GetHashCode();
                }
                if (this.RecordedFormat != null)
                {
                    hashCode = (hashCode * 59) + this.RecordedFormat.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EncodeMode1.GetHashCode();
                if (this.EncodeParentDirectoryName1 != null)
                {
                    hashCode = (hashCode * 59) + this.EncodeParentDirectoryName1.GetHashCode();
                }
                if (this.EncodeDirectory1 != null)
                {
                    hashCode = (hashCode * 59) + this.EncodeDirectory1.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EncodeMode2.GetHashCode();
                if (this.EncodeParentDirectoryName2 != null)
                {
                    hashCode = (hashCode * 59) + this.EncodeParentDirectoryName2.GetHashCode();
                }
                if (this.EncodeDirectory2 != null)
                {
                    hashCode = (hashCode * 59) + this.EncodeDirectory2.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EncodeMode3.GetHashCode();
                if (this.EncodeParentDirectoryName3 != null)
                {
                    hashCode = (hashCode * 59) + this.EncodeParentDirectoryName3.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EncodeDirectory3.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDeleteOriginalAfterEncode.GetHashCode();
                hashCode = (hashCode * 59) + this.ProgramId.GetHashCode();
                hashCode = (hashCode * 59) + this.ChannelId.GetHashCode();
                hashCode = (hashCode * 59) + this.StartAt.GetHashCode();
                hashCode = (hashCode * 59) + this.EndAt.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Extended != null)
                {
                    hashCode = (hashCode * 59) + this.Extended.GetHashCode();
                }
                if (this.RawExtended != null)
                {
                    hashCode = (hashCode * 59) + this.RawExtended.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Genre1.GetHashCode();
                hashCode = (hashCode * 59) + this.SubGenre1.GetHashCode();
                hashCode = (hashCode * 59) + this.Genre2.GetHashCode();
                hashCode = (hashCode * 59) + this.SubGenre2.GetHashCode();
                hashCode = (hashCode * 59) + this.Genre3.GetHashCode();
                hashCode = (hashCode * 59) + this.SubGenre3.GetHashCode();
                hashCode = (hashCode * 59) + this.VideoType.GetHashCode();
                hashCode = (hashCode * 59) + this.VideoResolution.GetHashCode();
                hashCode = (hashCode * 59) + this.VideoStreamContent.GetHashCode();
                hashCode = (hashCode * 59) + this.VideoComponentType.GetHashCode();
                hashCode = (hashCode * 59) + this.AudioSamplingRate.GetHashCode();
                hashCode = (hashCode * 59) + this.AudioComponentType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ProgramId (long) maximum
            if (this.ProgramId > (long)655356553565535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProgramId, must be a value less than or equal to 655356553565535.", new [] { "ProgramId" });
            }

            // ChannelId (long) maximum
            if (this.ChannelId > (long)6553565535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChannelId, must be a value less than or equal to 6553565535.", new [] { "ChannelId" });
            }

            yield break;
        }
    }

}
