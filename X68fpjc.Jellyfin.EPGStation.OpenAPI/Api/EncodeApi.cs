/*
 * epgstation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.6.20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using X68fpjc.Jellyfin.EPGStation.OpenAPI.Client;
using X68fpjc.Jellyfin.EPGStation.OpenAPI.Model;

namespace X68fpjc.Jellyfin.EPGStation.OpenAPI.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEncodeApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// エンコードをキャンセル
        /// </summary>
        /// <remarks>
        /// エンコードをキャンセルする
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="encodeId">エンコード id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void EncodeEncodeIdDelete(int encodeId, int operationIndex = 0);

        /// <summary>
        /// エンコードをキャンセル
        /// </summary>
        /// <remarks>
        /// エンコードをキャンセルする
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="encodeId">エンコード id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EncodeEncodeIdDeleteWithHttpInfo(int encodeId, int operationIndex = 0);
        /// <summary>
        /// エンコード情報取得
        /// </summary>
        /// <remarks>
        /// エンコード情報を取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EncodeInfo</returns>
        EncodeInfo EncodeGet(bool isHalfWidth, int operationIndex = 0);

        /// <summary>
        /// エンコード情報取得
        /// </summary>
        /// <remarks>
        /// エンコード情報を取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EncodeInfo</returns>
        ApiResponse<EncodeInfo> EncodeGetWithHttpInfo(bool isHalfWidth, int operationIndex = 0);
        /// <summary>
        /// エンコード追加
        /// </summary>
        /// <remarks>
        /// エンコードを追加する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addManualEncodeProgramOption"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddedEncode</returns>
        AddedEncode EncodePost(AddManualEncodeProgramOption addManualEncodeProgramOption, int operationIndex = 0);

        /// <summary>
        /// エンコード追加
        /// </summary>
        /// <remarks>
        /// エンコードを追加する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addManualEncodeProgramOption"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddedEncode</returns>
        ApiResponse<AddedEncode> EncodePostWithHttpInfo(AddManualEncodeProgramOption addManualEncodeProgramOption, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEncodeApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// エンコードをキャンセル
        /// </summary>
        /// <remarks>
        /// エンコードをキャンセルする
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="encodeId">エンコード id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EncodeEncodeIdDeleteAsync(int encodeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// エンコードをキャンセル
        /// </summary>
        /// <remarks>
        /// エンコードをキャンセルする
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="encodeId">エンコード id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EncodeEncodeIdDeleteWithHttpInfoAsync(int encodeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// エンコード情報取得
        /// </summary>
        /// <remarks>
        /// エンコード情報を取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EncodeInfo</returns>
        System.Threading.Tasks.Task<EncodeInfo> EncodeGetAsync(bool isHalfWidth, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// エンコード情報取得
        /// </summary>
        /// <remarks>
        /// エンコード情報を取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EncodeInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<EncodeInfo>> EncodeGetWithHttpInfoAsync(bool isHalfWidth, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// エンコード追加
        /// </summary>
        /// <remarks>
        /// エンコードを追加する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addManualEncodeProgramOption"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddedEncode</returns>
        System.Threading.Tasks.Task<AddedEncode> EncodePostAsync(AddManualEncodeProgramOption addManualEncodeProgramOption, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// エンコード追加
        /// </summary>
        /// <remarks>
        /// エンコードを追加する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addManualEncodeProgramOption"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddedEncode)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddedEncode>> EncodePostWithHttpInfoAsync(AddManualEncodeProgramOption addManualEncodeProgramOption, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEncodeApi : IEncodeApiSync, IEncodeApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EncodeApi : IEncodeApi
    {
        private X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EncodeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EncodeApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EncodeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EncodeApi(string basePath)
        {
            this.Configuration = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration.MergeConfigurations(
                X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.GlobalConfiguration.Instance,
                new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration { BasePath = basePath }
            );
            this.Client = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EncodeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EncodeApi(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration.MergeConfigurations(
                X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EncodeApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EncodeApi(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ISynchronousClient client, X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.IAsynchronousClient asyncClient, X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// エンコードをキャンセル エンコードをキャンセルする
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="encodeId">エンコード id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void EncodeEncodeIdDelete(int encodeId, int operationIndex = 0)
        {
            EncodeEncodeIdDeleteWithHttpInfo(encodeId);
        }

        /// <summary>
        /// エンコードをキャンセル エンコードをキャンセルする
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="encodeId">エンコード id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object> EncodeEncodeIdDeleteWithHttpInfo(int encodeId, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("encodeId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(encodeId)); // path parameter

            localVarRequestOptions.Operation = "EncodeApi.EncodeEncodeIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/encode/{encodeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EncodeEncodeIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// エンコードをキャンセル エンコードをキャンセルする
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="encodeId">エンコード id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EncodeEncodeIdDeleteAsync(int encodeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await EncodeEncodeIdDeleteWithHttpInfoAsync(encodeId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// エンコードをキャンセル エンコードをキャンセルする
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="encodeId">エンコード id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object>> EncodeEncodeIdDeleteWithHttpInfoAsync(int encodeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("encodeId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(encodeId)); // path parameter

            localVarRequestOptions.Operation = "EncodeApi.EncodeEncodeIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/encode/{encodeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EncodeEncodeIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// エンコード情報取得 エンコード情報を取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EncodeInfo</returns>
        public EncodeInfo EncodeGet(bool isHalfWidth, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<EncodeInfo> localVarResponse = EncodeGetWithHttpInfo(isHalfWidth);
            return localVarResponse.Data;
        }

        /// <summary>
        /// エンコード情報取得 エンコード情報を取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EncodeInfo</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<EncodeInfo> EncodeGetWithHttpInfo(bool isHalfWidth, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "isHalfWidth", isHalfWidth));

            localVarRequestOptions.Operation = "EncodeApi.EncodeGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<EncodeInfo>("/encode", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EncodeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// エンコード情報取得 エンコード情報を取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EncodeInfo</returns>
        public async System.Threading.Tasks.Task<EncodeInfo> EncodeGetAsync(bool isHalfWidth, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<EncodeInfo> localVarResponse = await EncodeGetWithHttpInfoAsync(isHalfWidth, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// エンコード情報取得 エンコード情報を取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EncodeInfo)</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<EncodeInfo>> EncodeGetWithHttpInfoAsync(bool isHalfWidth, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "isHalfWidth", isHalfWidth));

            localVarRequestOptions.Operation = "EncodeApi.EncodeGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EncodeInfo>("/encode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EncodeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// エンコード追加 エンコードを追加する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addManualEncodeProgramOption"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddedEncode</returns>
        public AddedEncode EncodePost(AddManualEncodeProgramOption addManualEncodeProgramOption, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<AddedEncode> localVarResponse = EncodePostWithHttpInfo(addManualEncodeProgramOption);
            return localVarResponse.Data;
        }

        /// <summary>
        /// エンコード追加 エンコードを追加する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addManualEncodeProgramOption"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddedEncode</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<AddedEncode> EncodePostWithHttpInfo(AddManualEncodeProgramOption addManualEncodeProgramOption, int operationIndex = 0)
        {
            // verify the required parameter 'addManualEncodeProgramOption' is set
            if (addManualEncodeProgramOption == null)
            {
                throw new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException(400, "Missing required parameter 'addManualEncodeProgramOption' when calling EncodeApi->EncodePost");
            }

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addManualEncodeProgramOption;

            localVarRequestOptions.Operation = "EncodeApi.EncodePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AddedEncode>("/encode", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EncodePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// エンコード追加 エンコードを追加する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addManualEncodeProgramOption"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddedEncode</returns>
        public async System.Threading.Tasks.Task<AddedEncode> EncodePostAsync(AddManualEncodeProgramOption addManualEncodeProgramOption, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<AddedEncode> localVarResponse = await EncodePostWithHttpInfoAsync(addManualEncodeProgramOption, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// エンコード追加 エンコードを追加する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addManualEncodeProgramOption"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddedEncode)</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<AddedEncode>> EncodePostWithHttpInfoAsync(AddManualEncodeProgramOption addManualEncodeProgramOption, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'addManualEncodeProgramOption' is set
            if (addManualEncodeProgramOption == null)
            {
                throw new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException(400, "Missing required parameter 'addManualEncodeProgramOption' when calling EncodeApi->EncodePost");
            }


            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addManualEncodeProgramOption;

            localVarRequestOptions.Operation = "EncodeApi.EncodePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AddedEncode>("/encode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EncodePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
