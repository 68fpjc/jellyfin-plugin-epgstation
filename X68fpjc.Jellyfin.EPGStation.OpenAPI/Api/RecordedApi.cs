/*
 * epgstation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.6.20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using X68fpjc.Jellyfin.EPGStation.OpenAPI.Client;
using X68fpjc.Jellyfin.EPGStation.OpenAPI.Model;

namespace X68fpjc.Jellyfin.EPGStation.OpenAPI.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordedApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 録画をクリーンアップ
        /// </summary>
        /// <remarks>
        /// 録画をクリーンアップする
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RecordedCleanupPost(int operationIndex = 0);

        /// <summary>
        /// 録画をクリーンアップ
        /// </summary>
        /// <remarks>
        /// 録画をクリーンアップする
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RecordedCleanupPostWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 録画情報取得
        /// </summary>
        /// <remarks>
        /// 録画情報を取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="offset">offset (optional, default to 0)</param>
        /// <param name="limit">limit (optional, default to 24)</param>
        /// <param name="isReverse">逆順で取得するか (optional)</param>
        /// <param name="ruleId">ルールid (optional)</param>
        /// <param name="channelId">放送局 id (optional)</param>
        /// <param name="genre">ジャンル (optional)</param>
        /// <param name="keyword">キーワード (optional)</param>
        /// <param name="hasOriginalFile">オリジナルファイルを含むか (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Records</returns>
        Records RecordedGet(bool isHalfWidth, int? offset = default(int?), int? limit = default(int?), bool? isReverse = default(bool?), int? ruleId = default(int?), long? channelId = default(long?), int? genre = default(int?), string? keyword = default(string?), bool? hasOriginalFile = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 録画情報取得
        /// </summary>
        /// <remarks>
        /// 録画情報を取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="offset">offset (optional, default to 0)</param>
        /// <param name="limit">limit (optional, default to 24)</param>
        /// <param name="isReverse">逆順で取得するか (optional)</param>
        /// <param name="ruleId">ルールid (optional)</param>
        /// <param name="channelId">放送局 id (optional)</param>
        /// <param name="genre">ジャンル (optional)</param>
        /// <param name="keyword">キーワード (optional)</param>
        /// <param name="hasOriginalFile">オリジナルファイルを含むか (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Records</returns>
        ApiResponse<Records> RecordedGetWithHttpInfo(bool isHalfWidth, int? offset = default(int?), int? limit = default(int?), bool? isReverse = default(bool?), int? ruleId = default(int?), long? channelId = default(long?), int? genre = default(int?), string? keyword = default(string?), bool? hasOriginalFile = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 録画検索オプションを取得
        /// </summary>
        /// <remarks>
        /// 録画検索オプションを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecordedSearchOptions</returns>
        RecordedSearchOptions RecordedOptionsGet(int operationIndex = 0);

        /// <summary>
        /// 録画検索オプションを取得
        /// </summary>
        /// <remarks>
        /// 録画検索オプションを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecordedSearchOptions</returns>
        ApiResponse<RecordedSearchOptions> RecordedOptionsGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 録画番組情報の新規作成
        /// </summary>
        /// <remarks>
        /// 録画番組情報を新規作成する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewRecordedOption"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreatedNewRecorded</returns>
        CreatedNewRecorded RecordedPost(CreateNewRecordedOption createNewRecordedOption, int operationIndex = 0);

        /// <summary>
        /// 録画番組情報の新規作成
        /// </summary>
        /// <remarks>
        /// 録画番組情報を新規作成する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewRecordedOption"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreatedNewRecorded</returns>
        ApiResponse<CreatedNewRecorded> RecordedPostWithHttpInfo(CreateNewRecordedOption createNewRecordedOption, int operationIndex = 0);
        /// <summary>
        /// 録画を削除
        /// </summary>
        /// <remarks>
        /// 録画を削除する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RecordedRecordedIdDelete(int recordedId, int operationIndex = 0);

        /// <summary>
        /// 録画を削除
        /// </summary>
        /// <remarks>
        /// 録画を削除する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RecordedRecordedIdDeleteWithHttpInfo(int recordedId, int operationIndex = 0);
        /// <summary>
        /// エンコード停止
        /// </summary>
        /// <remarks>
        /// エンコードを停止する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RecordedRecordedIdEncodeDelete(int recordedId, int operationIndex = 0);

        /// <summary>
        /// エンコード停止
        /// </summary>
        /// <remarks>
        /// エンコードを停止する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RecordedRecordedIdEncodeDeleteWithHttpInfo(int recordedId, int operationIndex = 0);
        /// <summary>
        /// 録画詳細情報を取得
        /// </summary>
        /// <remarks>
        /// 録画詳細情報を取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecordedItem</returns>
        RecordedItem RecordedRecordedIdGet(int recordedId, bool isHalfWidth, int operationIndex = 0);

        /// <summary>
        /// 録画詳細情報を取得
        /// </summary>
        /// <remarks>
        /// 録画詳細情報を取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecordedItem</returns>
        ApiResponse<RecordedItem> RecordedRecordedIdGetWithHttpInfo(int recordedId, bool isHalfWidth, int operationIndex = 0);
        /// <summary>
        /// 録画を自動削除対象から除外
        /// </summary>
        /// <remarks>
        /// 録画を自動削除対象から除外する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RecordedRecordedIdProtectPut(int recordedId, int operationIndex = 0);

        /// <summary>
        /// 録画を自動削除対象から除外
        /// </summary>
        /// <remarks>
        /// 録画を自動削除対象から除外する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RecordedRecordedIdProtectPutWithHttpInfo(int recordedId, int operationIndex = 0);
        /// <summary>
        /// 録画を自動削除対象に戻す
        /// </summary>
        /// <remarks>
        /// 録画を自動削除対象に戻す
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RecordedRecordedIdUnprotectPut(int recordedId, int operationIndex = 0);

        /// <summary>
        /// 録画を自動削除対象に戻す
        /// </summary>
        /// <remarks>
        /// 録画を自動削除対象に戻す
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RecordedRecordedIdUnprotectPutWithHttpInfo(int recordedId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordedApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 録画をクリーンアップ
        /// </summary>
        /// <remarks>
        /// 録画をクリーンアップする
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RecordedCleanupPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 録画をクリーンアップ
        /// </summary>
        /// <remarks>
        /// 録画をクリーンアップする
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RecordedCleanupPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 録画情報取得
        /// </summary>
        /// <remarks>
        /// 録画情報を取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="offset">offset (optional, default to 0)</param>
        /// <param name="limit">limit (optional, default to 24)</param>
        /// <param name="isReverse">逆順で取得するか (optional)</param>
        /// <param name="ruleId">ルールid (optional)</param>
        /// <param name="channelId">放送局 id (optional)</param>
        /// <param name="genre">ジャンル (optional)</param>
        /// <param name="keyword">キーワード (optional)</param>
        /// <param name="hasOriginalFile">オリジナルファイルを含むか (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Records</returns>
        System.Threading.Tasks.Task<Records> RecordedGetAsync(bool isHalfWidth, int? offset = default(int?), int? limit = default(int?), bool? isReverse = default(bool?), int? ruleId = default(int?), long? channelId = default(long?), int? genre = default(int?), string? keyword = default(string?), bool? hasOriginalFile = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 録画情報取得
        /// </summary>
        /// <remarks>
        /// 録画情報を取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="offset">offset (optional, default to 0)</param>
        /// <param name="limit">limit (optional, default to 24)</param>
        /// <param name="isReverse">逆順で取得するか (optional)</param>
        /// <param name="ruleId">ルールid (optional)</param>
        /// <param name="channelId">放送局 id (optional)</param>
        /// <param name="genre">ジャンル (optional)</param>
        /// <param name="keyword">キーワード (optional)</param>
        /// <param name="hasOriginalFile">オリジナルファイルを含むか (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Records)</returns>
        System.Threading.Tasks.Task<ApiResponse<Records>> RecordedGetWithHttpInfoAsync(bool isHalfWidth, int? offset = default(int?), int? limit = default(int?), bool? isReverse = default(bool?), int? ruleId = default(int?), long? channelId = default(long?), int? genre = default(int?), string? keyword = default(string?), bool? hasOriginalFile = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 録画検索オプションを取得
        /// </summary>
        /// <remarks>
        /// 録画検索オプションを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecordedSearchOptions</returns>
        System.Threading.Tasks.Task<RecordedSearchOptions> RecordedOptionsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 録画検索オプションを取得
        /// </summary>
        /// <remarks>
        /// 録画検索オプションを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecordedSearchOptions)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecordedSearchOptions>> RecordedOptionsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 録画番組情報の新規作成
        /// </summary>
        /// <remarks>
        /// 録画番組情報を新規作成する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewRecordedOption"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatedNewRecorded</returns>
        System.Threading.Tasks.Task<CreatedNewRecorded> RecordedPostAsync(CreateNewRecordedOption createNewRecordedOption, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 録画番組情報の新規作成
        /// </summary>
        /// <remarks>
        /// 録画番組情報を新規作成する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewRecordedOption"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatedNewRecorded)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatedNewRecorded>> RecordedPostWithHttpInfoAsync(CreateNewRecordedOption createNewRecordedOption, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 録画を削除
        /// </summary>
        /// <remarks>
        /// 録画を削除する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RecordedRecordedIdDeleteAsync(int recordedId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 録画を削除
        /// </summary>
        /// <remarks>
        /// 録画を削除する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RecordedRecordedIdDeleteWithHttpInfoAsync(int recordedId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// エンコード停止
        /// </summary>
        /// <remarks>
        /// エンコードを停止する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RecordedRecordedIdEncodeDeleteAsync(int recordedId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// エンコード停止
        /// </summary>
        /// <remarks>
        /// エンコードを停止する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RecordedRecordedIdEncodeDeleteWithHttpInfoAsync(int recordedId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 録画詳細情報を取得
        /// </summary>
        /// <remarks>
        /// 録画詳細情報を取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecordedItem</returns>
        System.Threading.Tasks.Task<RecordedItem> RecordedRecordedIdGetAsync(int recordedId, bool isHalfWidth, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 録画詳細情報を取得
        /// </summary>
        /// <remarks>
        /// 録画詳細情報を取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecordedItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecordedItem>> RecordedRecordedIdGetWithHttpInfoAsync(int recordedId, bool isHalfWidth, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 録画を自動削除対象から除外
        /// </summary>
        /// <remarks>
        /// 録画を自動削除対象から除外する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RecordedRecordedIdProtectPutAsync(int recordedId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 録画を自動削除対象から除外
        /// </summary>
        /// <remarks>
        /// 録画を自動削除対象から除外する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RecordedRecordedIdProtectPutWithHttpInfoAsync(int recordedId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 録画を自動削除対象に戻す
        /// </summary>
        /// <remarks>
        /// 録画を自動削除対象に戻す
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RecordedRecordedIdUnprotectPutAsync(int recordedId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 録画を自動削除対象に戻す
        /// </summary>
        /// <remarks>
        /// 録画を自動削除対象に戻す
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RecordedRecordedIdUnprotectPutWithHttpInfoAsync(int recordedId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordedApi : IRecordedApiSync, IRecordedApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecordedApi : IRecordedApi
    {
        private X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordedApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecordedApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordedApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecordedApi(string basePath)
        {
            this.Configuration = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration.MergeConfigurations(
                X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.GlobalConfiguration.Instance,
                new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration { BasePath = basePath }
            );
            this.Client = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordedApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecordedApi(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration.MergeConfigurations(
                X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordedApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RecordedApi(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ISynchronousClient client, X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.IAsynchronousClient asyncClient, X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 録画をクリーンアップ 録画をクリーンアップする
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RecordedCleanupPost(int operationIndex = 0)
        {
            RecordedCleanupPostWithHttpInfo();
        }

        /// <summary>
        /// 録画をクリーンアップ 録画をクリーンアップする
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object> RecordedCleanupPostWithHttpInfo(int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "RecordedApi.RecordedCleanupPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/recorded/cleanup", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecordedCleanupPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 録画をクリーンアップ 録画をクリーンアップする
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RecordedCleanupPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RecordedCleanupPostWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// 録画をクリーンアップ 録画をクリーンアップする
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object>> RecordedCleanupPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "RecordedApi.RecordedCleanupPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/recorded/cleanup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecordedCleanupPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 録画情報取得 録画情報を取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="offset">offset (optional, default to 0)</param>
        /// <param name="limit">limit (optional, default to 24)</param>
        /// <param name="isReverse">逆順で取得するか (optional)</param>
        /// <param name="ruleId">ルールid (optional)</param>
        /// <param name="channelId">放送局 id (optional)</param>
        /// <param name="genre">ジャンル (optional)</param>
        /// <param name="keyword">キーワード (optional)</param>
        /// <param name="hasOriginalFile">オリジナルファイルを含むか (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Records</returns>
        public Records RecordedGet(bool isHalfWidth, int? offset = default(int?), int? limit = default(int?), bool? isReverse = default(bool?), int? ruleId = default(int?), long? channelId = default(long?), int? genre = default(int?), string? keyword = default(string?), bool? hasOriginalFile = default(bool?), int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Records> localVarResponse = RecordedGetWithHttpInfo(isHalfWidth, offset, limit, isReverse, ruleId, channelId, genre, keyword, hasOriginalFile);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 録画情報取得 録画情報を取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="offset">offset (optional, default to 0)</param>
        /// <param name="limit">limit (optional, default to 24)</param>
        /// <param name="isReverse">逆順で取得するか (optional)</param>
        /// <param name="ruleId">ルールid (optional)</param>
        /// <param name="channelId">放送局 id (optional)</param>
        /// <param name="genre">ジャンル (optional)</param>
        /// <param name="keyword">キーワード (optional)</param>
        /// <param name="hasOriginalFile">オリジナルファイルを含むか (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Records</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Records> RecordedGetWithHttpInfo(bool isHalfWidth, int? offset = default(int?), int? limit = default(int?), bool? isReverse = default(bool?), int? ruleId = default(int?), long? channelId = default(long?), int? genre = default(int?), string? keyword = default(string?), bool? hasOriginalFile = default(bool?), int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "isHalfWidth", isHalfWidth));
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (isReverse != null)
            {
                localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "isReverse", isReverse));
            }
            if (ruleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "ruleId", ruleId));
            }
            if (channelId != null)
            {
                localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "channelId", channelId));
            }
            if (genre != null)
            {
                localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "genre", genre));
            }
            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (hasOriginalFile != null)
            {
                localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "hasOriginalFile", hasOriginalFile));
            }

            localVarRequestOptions.Operation = "RecordedApi.RecordedGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Records>("/recorded", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecordedGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 録画情報取得 録画情報を取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="offset">offset (optional, default to 0)</param>
        /// <param name="limit">limit (optional, default to 24)</param>
        /// <param name="isReverse">逆順で取得するか (optional)</param>
        /// <param name="ruleId">ルールid (optional)</param>
        /// <param name="channelId">放送局 id (optional)</param>
        /// <param name="genre">ジャンル (optional)</param>
        /// <param name="keyword">キーワード (optional)</param>
        /// <param name="hasOriginalFile">オリジナルファイルを含むか (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Records</returns>
        public async System.Threading.Tasks.Task<Records> RecordedGetAsync(bool isHalfWidth, int? offset = default(int?), int? limit = default(int?), bool? isReverse = default(bool?), int? ruleId = default(int?), long? channelId = default(long?), int? genre = default(int?), string? keyword = default(string?), bool? hasOriginalFile = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Records> localVarResponse = await RecordedGetWithHttpInfoAsync(isHalfWidth, offset, limit, isReverse, ruleId, channelId, genre, keyword, hasOriginalFile, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 録画情報取得 録画情報を取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="offset">offset (optional, default to 0)</param>
        /// <param name="limit">limit (optional, default to 24)</param>
        /// <param name="isReverse">逆順で取得するか (optional)</param>
        /// <param name="ruleId">ルールid (optional)</param>
        /// <param name="channelId">放送局 id (optional)</param>
        /// <param name="genre">ジャンル (optional)</param>
        /// <param name="keyword">キーワード (optional)</param>
        /// <param name="hasOriginalFile">オリジナルファイルを含むか (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Records)</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Records>> RecordedGetWithHttpInfoAsync(bool isHalfWidth, int? offset = default(int?), int? limit = default(int?), bool? isReverse = default(bool?), int? ruleId = default(int?), long? channelId = default(long?), int? genre = default(int?), string? keyword = default(string?), bool? hasOriginalFile = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "isHalfWidth", isHalfWidth));
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (isReverse != null)
            {
                localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "isReverse", isReverse));
            }
            if (ruleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "ruleId", ruleId));
            }
            if (channelId != null)
            {
                localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "channelId", channelId));
            }
            if (genre != null)
            {
                localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "genre", genre));
            }
            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (hasOriginalFile != null)
            {
                localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "hasOriginalFile", hasOriginalFile));
            }

            localVarRequestOptions.Operation = "RecordedApi.RecordedGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Records>("/recorded", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecordedGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 録画検索オプションを取得 録画検索オプションを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecordedSearchOptions</returns>
        public RecordedSearchOptions RecordedOptionsGet(int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<RecordedSearchOptions> localVarResponse = RecordedOptionsGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// 録画検索オプションを取得 録画検索オプションを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecordedSearchOptions</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<RecordedSearchOptions> RecordedOptionsGetWithHttpInfo(int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "RecordedApi.RecordedOptionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RecordedSearchOptions>("/recorded/options", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecordedOptionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 録画検索オプションを取得 録画検索オプションを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecordedSearchOptions</returns>
        public async System.Threading.Tasks.Task<RecordedSearchOptions> RecordedOptionsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<RecordedSearchOptions> localVarResponse = await RecordedOptionsGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 録画検索オプションを取得 録画検索オプションを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecordedSearchOptions)</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<RecordedSearchOptions>> RecordedOptionsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "RecordedApi.RecordedOptionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RecordedSearchOptions>("/recorded/options", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecordedOptionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 録画番組情報の新規作成 録画番組情報を新規作成する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewRecordedOption"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreatedNewRecorded</returns>
        public CreatedNewRecorded RecordedPost(CreateNewRecordedOption createNewRecordedOption, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<CreatedNewRecorded> localVarResponse = RecordedPostWithHttpInfo(createNewRecordedOption);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 録画番組情報の新規作成 録画番組情報を新規作成する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewRecordedOption"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreatedNewRecorded</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<CreatedNewRecorded> RecordedPostWithHttpInfo(CreateNewRecordedOption createNewRecordedOption, int operationIndex = 0)
        {
            // verify the required parameter 'createNewRecordedOption' is set
            if (createNewRecordedOption == null)
            {
                throw new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException(400, "Missing required parameter 'createNewRecordedOption' when calling RecordedApi->RecordedPost");
            }

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createNewRecordedOption;

            localVarRequestOptions.Operation = "RecordedApi.RecordedPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreatedNewRecorded>("/recorded", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecordedPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 録画番組情報の新規作成 録画番組情報を新規作成する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewRecordedOption"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatedNewRecorded</returns>
        public async System.Threading.Tasks.Task<CreatedNewRecorded> RecordedPostAsync(CreateNewRecordedOption createNewRecordedOption, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<CreatedNewRecorded> localVarResponse = await RecordedPostWithHttpInfoAsync(createNewRecordedOption, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 録画番組情報の新規作成 録画番組情報を新規作成する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewRecordedOption"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatedNewRecorded)</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<CreatedNewRecorded>> RecordedPostWithHttpInfoAsync(CreateNewRecordedOption createNewRecordedOption, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createNewRecordedOption' is set
            if (createNewRecordedOption == null)
            {
                throw new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException(400, "Missing required parameter 'createNewRecordedOption' when calling RecordedApi->RecordedPost");
            }


            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createNewRecordedOption;

            localVarRequestOptions.Operation = "RecordedApi.RecordedPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreatedNewRecorded>("/recorded", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecordedPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 録画を削除 録画を削除する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RecordedRecordedIdDelete(int recordedId, int operationIndex = 0)
        {
            RecordedRecordedIdDeleteWithHttpInfo(recordedId);
        }

        /// <summary>
        /// 録画を削除 録画を削除する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object> RecordedRecordedIdDeleteWithHttpInfo(int recordedId, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("recordedId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(recordedId)); // path parameter

            localVarRequestOptions.Operation = "RecordedApi.RecordedRecordedIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/recorded/{recordedId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecordedRecordedIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 録画を削除 録画を削除する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RecordedRecordedIdDeleteAsync(int recordedId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RecordedRecordedIdDeleteWithHttpInfoAsync(recordedId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// 録画を削除 録画を削除する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object>> RecordedRecordedIdDeleteWithHttpInfoAsync(int recordedId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("recordedId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(recordedId)); // path parameter

            localVarRequestOptions.Operation = "RecordedApi.RecordedRecordedIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/recorded/{recordedId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecordedRecordedIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// エンコード停止 エンコードを停止する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RecordedRecordedIdEncodeDelete(int recordedId, int operationIndex = 0)
        {
            RecordedRecordedIdEncodeDeleteWithHttpInfo(recordedId);
        }

        /// <summary>
        /// エンコード停止 エンコードを停止する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object> RecordedRecordedIdEncodeDeleteWithHttpInfo(int recordedId, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("recordedId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(recordedId)); // path parameter

            localVarRequestOptions.Operation = "RecordedApi.RecordedRecordedIdEncodeDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/recorded/{recordedId}/encode", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecordedRecordedIdEncodeDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// エンコード停止 エンコードを停止する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RecordedRecordedIdEncodeDeleteAsync(int recordedId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RecordedRecordedIdEncodeDeleteWithHttpInfoAsync(recordedId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// エンコード停止 エンコードを停止する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object>> RecordedRecordedIdEncodeDeleteWithHttpInfoAsync(int recordedId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("recordedId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(recordedId)); // path parameter

            localVarRequestOptions.Operation = "RecordedApi.RecordedRecordedIdEncodeDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/recorded/{recordedId}/encode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecordedRecordedIdEncodeDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 録画詳細情報を取得 録画詳細情報を取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecordedItem</returns>
        public RecordedItem RecordedRecordedIdGet(int recordedId, bool isHalfWidth, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<RecordedItem> localVarResponse = RecordedRecordedIdGetWithHttpInfo(recordedId, isHalfWidth);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 録画詳細情報を取得 録画詳細情報を取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecordedItem</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<RecordedItem> RecordedRecordedIdGetWithHttpInfo(int recordedId, bool isHalfWidth, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("recordedId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(recordedId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "isHalfWidth", isHalfWidth));

            localVarRequestOptions.Operation = "RecordedApi.RecordedRecordedIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RecordedItem>("/recorded/{recordedId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecordedRecordedIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 録画詳細情報を取得 録画詳細情報を取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecordedItem</returns>
        public async System.Threading.Tasks.Task<RecordedItem> RecordedRecordedIdGetAsync(int recordedId, bool isHalfWidth, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<RecordedItem> localVarResponse = await RecordedRecordedIdGetWithHttpInfoAsync(recordedId, isHalfWidth, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 録画詳細情報を取得 録画詳細情報を取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecordedItem)</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<RecordedItem>> RecordedRecordedIdGetWithHttpInfoAsync(int recordedId, bool isHalfWidth, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("recordedId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(recordedId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "isHalfWidth", isHalfWidth));

            localVarRequestOptions.Operation = "RecordedApi.RecordedRecordedIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RecordedItem>("/recorded/{recordedId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecordedRecordedIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 録画を自動削除対象から除外 録画を自動削除対象から除外する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RecordedRecordedIdProtectPut(int recordedId, int operationIndex = 0)
        {
            RecordedRecordedIdProtectPutWithHttpInfo(recordedId);
        }

        /// <summary>
        /// 録画を自動削除対象から除外 録画を自動削除対象から除外する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object> RecordedRecordedIdProtectPutWithHttpInfo(int recordedId, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("recordedId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(recordedId)); // path parameter

            localVarRequestOptions.Operation = "RecordedApi.RecordedRecordedIdProtectPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/recorded/{recordedId}/protect", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecordedRecordedIdProtectPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 録画を自動削除対象から除外 録画を自動削除対象から除外する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RecordedRecordedIdProtectPutAsync(int recordedId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RecordedRecordedIdProtectPutWithHttpInfoAsync(recordedId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// 録画を自動削除対象から除外 録画を自動削除対象から除外する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object>> RecordedRecordedIdProtectPutWithHttpInfoAsync(int recordedId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("recordedId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(recordedId)); // path parameter

            localVarRequestOptions.Operation = "RecordedApi.RecordedRecordedIdProtectPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/recorded/{recordedId}/protect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecordedRecordedIdProtectPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 録画を自動削除対象に戻す 録画を自動削除対象に戻す
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RecordedRecordedIdUnprotectPut(int recordedId, int operationIndex = 0)
        {
            RecordedRecordedIdUnprotectPutWithHttpInfo(recordedId);
        }

        /// <summary>
        /// 録画を自動削除対象に戻す 録画を自動削除対象に戻す
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object> RecordedRecordedIdUnprotectPutWithHttpInfo(int recordedId, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("recordedId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(recordedId)); // path parameter

            localVarRequestOptions.Operation = "RecordedApi.RecordedRecordedIdUnprotectPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/recorded/{recordedId}/unprotect", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecordedRecordedIdUnprotectPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 録画を自動削除対象に戻す 録画を自動削除対象に戻す
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RecordedRecordedIdUnprotectPutAsync(int recordedId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RecordedRecordedIdUnprotectPutWithHttpInfoAsync(recordedId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// 録画を自動削除対象に戻す 録画を自動削除対象に戻す
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordedId">recorded id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object>> RecordedRecordedIdUnprotectPutWithHttpInfoAsync(int recordedId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("recordedId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(recordedId)); // path parameter

            localVarRequestOptions.Operation = "RecordedApi.RecordedRecordedIdUnprotectPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/recorded/{recordedId}/unprotect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecordedRecordedIdUnprotectPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
