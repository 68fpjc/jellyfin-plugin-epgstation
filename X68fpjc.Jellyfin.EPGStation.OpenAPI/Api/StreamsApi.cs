/*
 * epgstation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.6.20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using X68fpjc.Jellyfin.EPGStation.OpenAPI.Client;
using X68fpjc.Jellyfin.EPGStation.OpenAPI.Model;

namespace X68fpjc.Jellyfin.EPGStation.OpenAPI.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStreamsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 全てのストリームを停止
        /// </summary>
        /// <remarks>
        /// 全てのストリームを停止する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void StreamsDelete(int operationIndex = 0);

        /// <summary>
        /// 全てのストリームを停止
        /// </summary>
        /// <remarks>
        /// 全てのストリームを停止する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StreamsDeleteWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// ストリーム情報を取得
        /// </summary>
        /// <remarks>
        /// ストリーム情報を取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StreamInfo</returns>
        StreamInfo StreamsGet(bool isHalfWidth, int operationIndex = 0);

        /// <summary>
        /// ストリーム情報を取得
        /// </summary>
        /// <remarks>
        /// ストリーム情報を取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StreamInfo</returns>
        ApiResponse<StreamInfo> StreamsGetWithHttpInfo(bool isHalfWidth, int operationIndex = 0);
        /// <summary>
        /// ライブ HLS ストリーム
        /// </summary>
        /// <remarks>
        /// ライブ HLS ストリームを開始する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StartStreamInfo</returns>
        StartStreamInfo StreamsLiveChannelIdHlsGet(long channelId, int mode, int operationIndex = 0);

        /// <summary>
        /// ライブ HLS ストリーム
        /// </summary>
        /// <remarks>
        /// ライブ HLS ストリームを開始する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StartStreamInfo</returns>
        ApiResponse<StartStreamInfo> StreamsLiveChannelIdHlsGetWithHttpInfo(long channelId, int mode, int operationIndex = 0);
        /// <summary>
        /// ライブ M2TS ストリーム
        /// </summary>
        /// <remarks>
        /// ライブ M2TS ストリームを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void StreamsLiveChannelIdM2tsGet(long channelId, int mode, int operationIndex = 0);

        /// <summary>
        /// ライブ M2TS ストリーム
        /// </summary>
        /// <remarks>
        /// ライブ M2TS ストリームを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StreamsLiveChannelIdM2tsGetWithHttpInfo(long channelId, int mode, int operationIndex = 0);
        /// <summary>
        /// ライブ M2TS ストリームプレイリスト
        /// </summary>
        /// <remarks>
        /// ライブ M2TS ストリームプレイリストを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void StreamsLiveChannelIdM2tsPlaylistGet(long channelId, int mode, int operationIndex = 0);

        /// <summary>
        /// ライブ M2TS ストリームプレイリスト
        /// </summary>
        /// <remarks>
        /// ライブ M2TS ストリームプレイリストを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StreamsLiveChannelIdM2tsPlaylistGetWithHttpInfo(long channelId, int mode, int operationIndex = 0);
        /// <summary>
        /// ライブ M2TS Low Latency (mpegts.js 用) ストリーム
        /// </summary>
        /// <remarks>
        /// ライブ M2TS Low Latency ストリームを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void StreamsLiveChannelIdM2tsllGet(long channelId, int mode, int operationIndex = 0);

        /// <summary>
        /// ライブ M2TS Low Latency (mpegts.js 用) ストリーム
        /// </summary>
        /// <remarks>
        /// ライブ M2TS Low Latency ストリームを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StreamsLiveChannelIdM2tsllGetWithHttpInfo(long channelId, int mode, int operationIndex = 0);
        /// <summary>
        /// ライブ mp4 ストリーム
        /// </summary>
        /// <remarks>
        /// ライブ mp4 ストリームを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void StreamsLiveChannelIdMp4Get(long channelId, int mode, int operationIndex = 0);

        /// <summary>
        /// ライブ mp4 ストリーム
        /// </summary>
        /// <remarks>
        /// ライブ mp4 ストリームを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StreamsLiveChannelIdMp4GetWithHttpInfo(long channelId, int mode, int operationIndex = 0);
        /// <summary>
        /// ライブ WebM ストリーム
        /// </summary>
        /// <remarks>
        /// ライブ WebM ストリームを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void StreamsLiveChannelIdWebmGet(long channelId, int mode, int operationIndex = 0);

        /// <summary>
        /// ライブ WebM ストリーム
        /// </summary>
        /// <remarks>
        /// ライブ WebM ストリームを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StreamsLiveChannelIdWebmGetWithHttpInfo(long channelId, int mode, int operationIndex = 0);
        /// <summary>
        /// 録画 HLS ストリーム
        /// </summary>
        /// <remarks>
        /// 録画 HLS ストリームを開始する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoFileId">video file id</param>
        /// <param name="ss">再生位置</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StartStreamInfo</returns>
        StartStreamInfo StreamsRecordedVideoFileIdHlsGet(int videoFileId, int ss, int mode, int operationIndex = 0);

        /// <summary>
        /// 録画 HLS ストリーム
        /// </summary>
        /// <remarks>
        /// 録画 HLS ストリームを開始する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoFileId">video file id</param>
        /// <param name="ss">再生位置</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StartStreamInfo</returns>
        ApiResponse<StartStreamInfo> StreamsRecordedVideoFileIdHlsGetWithHttpInfo(int videoFileId, int ss, int mode, int operationIndex = 0);
        /// <summary>
        /// 録画 mp4 ストリーム
        /// </summary>
        /// <remarks>
        /// 録画 mp4 ストリームを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoFileId">video file id</param>
        /// <param name="ss">再生位置</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void StreamsRecordedVideoFileIdMp4Get(int videoFileId, int ss, int mode, int operationIndex = 0);

        /// <summary>
        /// 録画 mp4 ストリーム
        /// </summary>
        /// <remarks>
        /// 録画 mp4 ストリームを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoFileId">video file id</param>
        /// <param name="ss">再生位置</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StreamsRecordedVideoFileIdMp4GetWithHttpInfo(int videoFileId, int ss, int mode, int operationIndex = 0);
        /// <summary>
        /// 録画 WebM ストリーム
        /// </summary>
        /// <remarks>
        /// 録画 WebM ストリームを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoFileId">video file id</param>
        /// <param name="ss">再生位置</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void StreamsRecordedVideoFileIdWebmGet(int videoFileId, int ss, int mode, int operationIndex = 0);

        /// <summary>
        /// 録画 WebM ストリーム
        /// </summary>
        /// <remarks>
        /// 録画 WebM ストリームを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoFileId">video file id</param>
        /// <param name="ss">再生位置</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StreamsRecordedVideoFileIdWebmGetWithHttpInfo(int videoFileId, int ss, int mode, int operationIndex = 0);
        /// <summary>
        /// ストリームを停止
        /// </summary>
        /// <remarks>
        /// ストリームを停止する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ストリーム id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void StreamsStreamIdDelete(int streamId, int operationIndex = 0);

        /// <summary>
        /// ストリームを停止
        /// </summary>
        /// <remarks>
        /// ストリームを停止する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ストリーム id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StreamsStreamIdDeleteWithHttpInfo(int streamId, int operationIndex = 0);
        /// <summary>
        /// ストリーム停止タイマーを更新する
        /// </summary>
        /// <remarks>
        /// ストリーム停止タイマーを更新する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ストリーム id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void StreamsStreamIdKeepPut(int streamId, int operationIndex = 0);

        /// <summary>
        /// ストリーム停止タイマーを更新する
        /// </summary>
        /// <remarks>
        /// ストリーム停止タイマーを更新する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ストリーム id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StreamsStreamIdKeepPutWithHttpInfo(int streamId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStreamsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 全てのストリームを停止
        /// </summary>
        /// <remarks>
        /// 全てのストリームを停止する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StreamsDeleteAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 全てのストリームを停止
        /// </summary>
        /// <remarks>
        /// 全てのストリームを停止する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamsDeleteWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// ストリーム情報を取得
        /// </summary>
        /// <remarks>
        /// ストリーム情報を取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StreamInfo</returns>
        System.Threading.Tasks.Task<StreamInfo> StreamsGetAsync(bool isHalfWidth, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ストリーム情報を取得
        /// </summary>
        /// <remarks>
        /// ストリーム情報を取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreamInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamInfo>> StreamsGetWithHttpInfoAsync(bool isHalfWidth, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// ライブ HLS ストリーム
        /// </summary>
        /// <remarks>
        /// ライブ HLS ストリームを開始する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StartStreamInfo</returns>
        System.Threading.Tasks.Task<StartStreamInfo> StreamsLiveChannelIdHlsGetAsync(long channelId, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ライブ HLS ストリーム
        /// </summary>
        /// <remarks>
        /// ライブ HLS ストリームを開始する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StartStreamInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<StartStreamInfo>> StreamsLiveChannelIdHlsGetWithHttpInfoAsync(long channelId, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// ライブ M2TS ストリーム
        /// </summary>
        /// <remarks>
        /// ライブ M2TS ストリームを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StreamsLiveChannelIdM2tsGetAsync(long channelId, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ライブ M2TS ストリーム
        /// </summary>
        /// <remarks>
        /// ライブ M2TS ストリームを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamsLiveChannelIdM2tsGetWithHttpInfoAsync(long channelId, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// ライブ M2TS ストリームプレイリスト
        /// </summary>
        /// <remarks>
        /// ライブ M2TS ストリームプレイリストを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StreamsLiveChannelIdM2tsPlaylistGetAsync(long channelId, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ライブ M2TS ストリームプレイリスト
        /// </summary>
        /// <remarks>
        /// ライブ M2TS ストリームプレイリストを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamsLiveChannelIdM2tsPlaylistGetWithHttpInfoAsync(long channelId, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// ライブ M2TS Low Latency (mpegts.js 用) ストリーム
        /// </summary>
        /// <remarks>
        /// ライブ M2TS Low Latency ストリームを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StreamsLiveChannelIdM2tsllGetAsync(long channelId, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ライブ M2TS Low Latency (mpegts.js 用) ストリーム
        /// </summary>
        /// <remarks>
        /// ライブ M2TS Low Latency ストリームを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamsLiveChannelIdM2tsllGetWithHttpInfoAsync(long channelId, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// ライブ mp4 ストリーム
        /// </summary>
        /// <remarks>
        /// ライブ mp4 ストリームを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StreamsLiveChannelIdMp4GetAsync(long channelId, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ライブ mp4 ストリーム
        /// </summary>
        /// <remarks>
        /// ライブ mp4 ストリームを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamsLiveChannelIdMp4GetWithHttpInfoAsync(long channelId, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// ライブ WebM ストリーム
        /// </summary>
        /// <remarks>
        /// ライブ WebM ストリームを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StreamsLiveChannelIdWebmGetAsync(long channelId, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ライブ WebM ストリーム
        /// </summary>
        /// <remarks>
        /// ライブ WebM ストリームを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamsLiveChannelIdWebmGetWithHttpInfoAsync(long channelId, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 録画 HLS ストリーム
        /// </summary>
        /// <remarks>
        /// 録画 HLS ストリームを開始する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoFileId">video file id</param>
        /// <param name="ss">再生位置</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StartStreamInfo</returns>
        System.Threading.Tasks.Task<StartStreamInfo> StreamsRecordedVideoFileIdHlsGetAsync(int videoFileId, int ss, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 録画 HLS ストリーム
        /// </summary>
        /// <remarks>
        /// 録画 HLS ストリームを開始する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoFileId">video file id</param>
        /// <param name="ss">再生位置</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StartStreamInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<StartStreamInfo>> StreamsRecordedVideoFileIdHlsGetWithHttpInfoAsync(int videoFileId, int ss, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 録画 mp4 ストリーム
        /// </summary>
        /// <remarks>
        /// 録画 mp4 ストリームを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoFileId">video file id</param>
        /// <param name="ss">再生位置</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StreamsRecordedVideoFileIdMp4GetAsync(int videoFileId, int ss, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 録画 mp4 ストリーム
        /// </summary>
        /// <remarks>
        /// 録画 mp4 ストリームを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoFileId">video file id</param>
        /// <param name="ss">再生位置</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamsRecordedVideoFileIdMp4GetWithHttpInfoAsync(int videoFileId, int ss, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 録画 WebM ストリーム
        /// </summary>
        /// <remarks>
        /// 録画 WebM ストリームを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoFileId">video file id</param>
        /// <param name="ss">再生位置</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StreamsRecordedVideoFileIdWebmGetAsync(int videoFileId, int ss, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 録画 WebM ストリーム
        /// </summary>
        /// <remarks>
        /// 録画 WebM ストリームを取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoFileId">video file id</param>
        /// <param name="ss">再生位置</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamsRecordedVideoFileIdWebmGetWithHttpInfoAsync(int videoFileId, int ss, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// ストリームを停止
        /// </summary>
        /// <remarks>
        /// ストリームを停止する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ストリーム id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StreamsStreamIdDeleteAsync(int streamId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ストリームを停止
        /// </summary>
        /// <remarks>
        /// ストリームを停止する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ストリーム id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamsStreamIdDeleteWithHttpInfoAsync(int streamId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// ストリーム停止タイマーを更新する
        /// </summary>
        /// <remarks>
        /// ストリーム停止タイマーを更新する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ストリーム id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StreamsStreamIdKeepPutAsync(int streamId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ストリーム停止タイマーを更新する
        /// </summary>
        /// <remarks>
        /// ストリーム停止タイマーを更新する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ストリーム id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StreamsStreamIdKeepPutWithHttpInfoAsync(int streamId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStreamsApi : IStreamsApiSync, IStreamsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StreamsApi : IStreamsApi
    {
        private X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StreamsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StreamsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StreamsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StreamsApi(string basePath)
        {
            this.Configuration = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration.MergeConfigurations(
                X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.GlobalConfiguration.Instance,
                new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration { BasePath = basePath }
            );
            this.Client = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StreamsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StreamsApi(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration.MergeConfigurations(
                X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StreamsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StreamsApi(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ISynchronousClient client, X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.IAsynchronousClient asyncClient, X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 全てのストリームを停止 全てのストリームを停止する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void StreamsDelete(int operationIndex = 0)
        {
            StreamsDeleteWithHttpInfo();
        }

        /// <summary>
        /// 全てのストリームを停止 全てのストリームを停止する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object> StreamsDeleteWithHttpInfo(int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "StreamsApi.StreamsDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/streams", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 全てのストリームを停止 全てのストリームを停止する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StreamsDeleteAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await StreamsDeleteWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// 全てのストリームを停止 全てのストリームを停止する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object>> StreamsDeleteWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "StreamsApi.StreamsDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/streams", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ストリーム情報を取得 ストリーム情報を取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StreamInfo</returns>
        public StreamInfo StreamsGet(bool isHalfWidth, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<StreamInfo> localVarResponse = StreamsGetWithHttpInfo(isHalfWidth);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ストリーム情報を取得 ストリーム情報を取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StreamInfo</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<StreamInfo> StreamsGetWithHttpInfo(bool isHalfWidth, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "isHalfWidth", isHalfWidth));

            localVarRequestOptions.Operation = "StreamsApi.StreamsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<StreamInfo>("/streams", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ストリーム情報を取得 ストリーム情報を取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StreamInfo</returns>
        public async System.Threading.Tasks.Task<StreamInfo> StreamsGetAsync(bool isHalfWidth, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<StreamInfo> localVarResponse = await StreamsGetWithHttpInfoAsync(isHalfWidth, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ストリーム情報を取得 ストリーム情報を取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreamInfo)</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<StreamInfo>> StreamsGetWithHttpInfoAsync(bool isHalfWidth, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "isHalfWidth", isHalfWidth));

            localVarRequestOptions.Operation = "StreamsApi.StreamsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StreamInfo>("/streams", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ライブ HLS ストリーム ライブ HLS ストリームを開始する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StartStreamInfo</returns>
        public StartStreamInfo StreamsLiveChannelIdHlsGet(long channelId, int mode, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<StartStreamInfo> localVarResponse = StreamsLiveChannelIdHlsGetWithHttpInfo(channelId, mode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ライブ HLS ストリーム ライブ HLS ストリームを開始する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StartStreamInfo</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<StartStreamInfo> StreamsLiveChannelIdHlsGetWithHttpInfo(long channelId, int mode, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));

            localVarRequestOptions.Operation = "StreamsApi.StreamsLiveChannelIdHlsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<StartStreamInfo>("/streams/live/{channelId}/hls", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsLiveChannelIdHlsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ライブ HLS ストリーム ライブ HLS ストリームを開始する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StartStreamInfo</returns>
        public async System.Threading.Tasks.Task<StartStreamInfo> StreamsLiveChannelIdHlsGetAsync(long channelId, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<StartStreamInfo> localVarResponse = await StreamsLiveChannelIdHlsGetWithHttpInfoAsync(channelId, mode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ライブ HLS ストリーム ライブ HLS ストリームを開始する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StartStreamInfo)</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<StartStreamInfo>> StreamsLiveChannelIdHlsGetWithHttpInfoAsync(long channelId, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));

            localVarRequestOptions.Operation = "StreamsApi.StreamsLiveChannelIdHlsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StartStreamInfo>("/streams/live/{channelId}/hls", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsLiveChannelIdHlsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ライブ M2TS ストリーム ライブ M2TS ストリームを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void StreamsLiveChannelIdM2tsGet(long channelId, int mode, int operationIndex = 0)
        {
            StreamsLiveChannelIdM2tsGetWithHttpInfo(channelId, mode);
        }

        /// <summary>
        /// ライブ M2TS ストリーム ライブ M2TS ストリームを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object> StreamsLiveChannelIdM2tsGetWithHttpInfo(long channelId, int mode, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "video/mp2t",
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));

            localVarRequestOptions.Operation = "StreamsApi.StreamsLiveChannelIdM2tsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/streams/live/{channelId}/m2ts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsLiveChannelIdM2tsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ライブ M2TS ストリーム ライブ M2TS ストリームを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StreamsLiveChannelIdM2tsGetAsync(long channelId, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await StreamsLiveChannelIdM2tsGetWithHttpInfoAsync(channelId, mode, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// ライブ M2TS ストリーム ライブ M2TS ストリームを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object>> StreamsLiveChannelIdM2tsGetWithHttpInfoAsync(long channelId, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "video/mp2t",
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));

            localVarRequestOptions.Operation = "StreamsApi.StreamsLiveChannelIdM2tsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/streams/live/{channelId}/m2ts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsLiveChannelIdM2tsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ライブ M2TS ストリームプレイリスト ライブ M2TS ストリームプレイリストを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void StreamsLiveChannelIdM2tsPlaylistGet(long channelId, int mode, int operationIndex = 0)
        {
            StreamsLiveChannelIdM2tsPlaylistGetWithHttpInfo(channelId, mode);
        }

        /// <summary>
        /// ライブ M2TS ストリームプレイリスト ライブ M2TS ストリームプレイリストを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object> StreamsLiveChannelIdM2tsPlaylistGetWithHttpInfo(long channelId, int mode, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/x-mpegURL",
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));

            localVarRequestOptions.Operation = "StreamsApi.StreamsLiveChannelIdM2tsPlaylistGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/streams/live/{channelId}/m2ts/playlist", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsLiveChannelIdM2tsPlaylistGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ライブ M2TS ストリームプレイリスト ライブ M2TS ストリームプレイリストを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StreamsLiveChannelIdM2tsPlaylistGetAsync(long channelId, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await StreamsLiveChannelIdM2tsPlaylistGetWithHttpInfoAsync(channelId, mode, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// ライブ M2TS ストリームプレイリスト ライブ M2TS ストリームプレイリストを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object>> StreamsLiveChannelIdM2tsPlaylistGetWithHttpInfoAsync(long channelId, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/x-mpegURL",
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));

            localVarRequestOptions.Operation = "StreamsApi.StreamsLiveChannelIdM2tsPlaylistGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/streams/live/{channelId}/m2ts/playlist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsLiveChannelIdM2tsPlaylistGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ライブ M2TS Low Latency (mpegts.js 用) ストリーム ライブ M2TS Low Latency ストリームを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void StreamsLiveChannelIdM2tsllGet(long channelId, int mode, int operationIndex = 0)
        {
            StreamsLiveChannelIdM2tsllGetWithHttpInfo(channelId, mode);
        }

        /// <summary>
        /// ライブ M2TS Low Latency (mpegts.js 用) ストリーム ライブ M2TS Low Latency ストリームを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object> StreamsLiveChannelIdM2tsllGetWithHttpInfo(long channelId, int mode, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "video/mp2t",
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));

            localVarRequestOptions.Operation = "StreamsApi.StreamsLiveChannelIdM2tsllGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/streams/live/{channelId}/m2tsll", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsLiveChannelIdM2tsllGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ライブ M2TS Low Latency (mpegts.js 用) ストリーム ライブ M2TS Low Latency ストリームを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StreamsLiveChannelIdM2tsllGetAsync(long channelId, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await StreamsLiveChannelIdM2tsllGetWithHttpInfoAsync(channelId, mode, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// ライブ M2TS Low Latency (mpegts.js 用) ストリーム ライブ M2TS Low Latency ストリームを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object>> StreamsLiveChannelIdM2tsllGetWithHttpInfoAsync(long channelId, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "video/mp2t",
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));

            localVarRequestOptions.Operation = "StreamsApi.StreamsLiveChannelIdM2tsllGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/streams/live/{channelId}/m2tsll", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsLiveChannelIdM2tsllGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ライブ mp4 ストリーム ライブ mp4 ストリームを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void StreamsLiveChannelIdMp4Get(long channelId, int mode, int operationIndex = 0)
        {
            StreamsLiveChannelIdMp4GetWithHttpInfo(channelId, mode);
        }

        /// <summary>
        /// ライブ mp4 ストリーム ライブ mp4 ストリームを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object> StreamsLiveChannelIdMp4GetWithHttpInfo(long channelId, int mode, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "video/mp4",
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));

            localVarRequestOptions.Operation = "StreamsApi.StreamsLiveChannelIdMp4Get";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/streams/live/{channelId}/mp4", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsLiveChannelIdMp4Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ライブ mp4 ストリーム ライブ mp4 ストリームを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StreamsLiveChannelIdMp4GetAsync(long channelId, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await StreamsLiveChannelIdMp4GetWithHttpInfoAsync(channelId, mode, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// ライブ mp4 ストリーム ライブ mp4 ストリームを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object>> StreamsLiveChannelIdMp4GetWithHttpInfoAsync(long channelId, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "video/mp4",
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));

            localVarRequestOptions.Operation = "StreamsApi.StreamsLiveChannelIdMp4Get";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/streams/live/{channelId}/mp4", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsLiveChannelIdMp4Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ライブ WebM ストリーム ライブ WebM ストリームを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void StreamsLiveChannelIdWebmGet(long channelId, int mode, int operationIndex = 0)
        {
            StreamsLiveChannelIdWebmGetWithHttpInfo(channelId, mode);
        }

        /// <summary>
        /// ライブ WebM ストリーム ライブ WebM ストリームを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object> StreamsLiveChannelIdWebmGetWithHttpInfo(long channelId, int mode, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "video/webm",
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));

            localVarRequestOptions.Operation = "StreamsApi.StreamsLiveChannelIdWebmGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/streams/live/{channelId}/webm", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsLiveChannelIdWebmGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ライブ WebM ストリーム ライブ WebM ストリームを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StreamsLiveChannelIdWebmGetAsync(long channelId, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await StreamsLiveChannelIdWebmGetWithHttpInfoAsync(channelId, mode, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// ライブ WebM ストリーム ライブ WebM ストリームを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">放送局 id</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object>> StreamsLiveChannelIdWebmGetWithHttpInfoAsync(long channelId, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "video/webm",
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("channelId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));

            localVarRequestOptions.Operation = "StreamsApi.StreamsLiveChannelIdWebmGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/streams/live/{channelId}/webm", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsLiveChannelIdWebmGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 録画 HLS ストリーム 録画 HLS ストリームを開始する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoFileId">video file id</param>
        /// <param name="ss">再生位置</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StartStreamInfo</returns>
        public StartStreamInfo StreamsRecordedVideoFileIdHlsGet(int videoFileId, int ss, int mode, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<StartStreamInfo> localVarResponse = StreamsRecordedVideoFileIdHlsGetWithHttpInfo(videoFileId, ss, mode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 録画 HLS ストリーム 録画 HLS ストリームを開始する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoFileId">video file id</param>
        /// <param name="ss">再生位置</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StartStreamInfo</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<StartStreamInfo> StreamsRecordedVideoFileIdHlsGetWithHttpInfo(int videoFileId, int ss, int mode, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoFileId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(videoFileId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "ss", ss));
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));

            localVarRequestOptions.Operation = "StreamsApi.StreamsRecordedVideoFileIdHlsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<StartStreamInfo>("/streams/recorded/{videoFileId}/hls", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsRecordedVideoFileIdHlsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 録画 HLS ストリーム 録画 HLS ストリームを開始する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoFileId">video file id</param>
        /// <param name="ss">再生位置</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StartStreamInfo</returns>
        public async System.Threading.Tasks.Task<StartStreamInfo> StreamsRecordedVideoFileIdHlsGetAsync(int videoFileId, int ss, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<StartStreamInfo> localVarResponse = await StreamsRecordedVideoFileIdHlsGetWithHttpInfoAsync(videoFileId, ss, mode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 録画 HLS ストリーム 録画 HLS ストリームを開始する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoFileId">video file id</param>
        /// <param name="ss">再生位置</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StartStreamInfo)</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<StartStreamInfo>> StreamsRecordedVideoFileIdHlsGetWithHttpInfoAsync(int videoFileId, int ss, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoFileId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(videoFileId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "ss", ss));
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));

            localVarRequestOptions.Operation = "StreamsApi.StreamsRecordedVideoFileIdHlsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StartStreamInfo>("/streams/recorded/{videoFileId}/hls", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsRecordedVideoFileIdHlsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 録画 mp4 ストリーム 録画 mp4 ストリームを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoFileId">video file id</param>
        /// <param name="ss">再生位置</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void StreamsRecordedVideoFileIdMp4Get(int videoFileId, int ss, int mode, int operationIndex = 0)
        {
            StreamsRecordedVideoFileIdMp4GetWithHttpInfo(videoFileId, ss, mode);
        }

        /// <summary>
        /// 録画 mp4 ストリーム 録画 mp4 ストリームを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoFileId">video file id</param>
        /// <param name="ss">再生位置</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object> StreamsRecordedVideoFileIdMp4GetWithHttpInfo(int videoFileId, int ss, int mode, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "video/mp4",
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoFileId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(videoFileId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "ss", ss));
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));

            localVarRequestOptions.Operation = "StreamsApi.StreamsRecordedVideoFileIdMp4Get";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/streams/recorded/{videoFileId}/mp4", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsRecordedVideoFileIdMp4Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 録画 mp4 ストリーム 録画 mp4 ストリームを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoFileId">video file id</param>
        /// <param name="ss">再生位置</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StreamsRecordedVideoFileIdMp4GetAsync(int videoFileId, int ss, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await StreamsRecordedVideoFileIdMp4GetWithHttpInfoAsync(videoFileId, ss, mode, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// 録画 mp4 ストリーム 録画 mp4 ストリームを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoFileId">video file id</param>
        /// <param name="ss">再生位置</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object>> StreamsRecordedVideoFileIdMp4GetWithHttpInfoAsync(int videoFileId, int ss, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "video/mp4",
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoFileId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(videoFileId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "ss", ss));
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));

            localVarRequestOptions.Operation = "StreamsApi.StreamsRecordedVideoFileIdMp4Get";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/streams/recorded/{videoFileId}/mp4", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsRecordedVideoFileIdMp4Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 録画 WebM ストリーム 録画 WebM ストリームを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoFileId">video file id</param>
        /// <param name="ss">再生位置</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void StreamsRecordedVideoFileIdWebmGet(int videoFileId, int ss, int mode, int operationIndex = 0)
        {
            StreamsRecordedVideoFileIdWebmGetWithHttpInfo(videoFileId, ss, mode);
        }

        /// <summary>
        /// 録画 WebM ストリーム 録画 WebM ストリームを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoFileId">video file id</param>
        /// <param name="ss">再生位置</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object> StreamsRecordedVideoFileIdWebmGetWithHttpInfo(int videoFileId, int ss, int mode, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "video/webm",
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoFileId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(videoFileId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "ss", ss));
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));

            localVarRequestOptions.Operation = "StreamsApi.StreamsRecordedVideoFileIdWebmGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/streams/recorded/{videoFileId}/webm", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsRecordedVideoFileIdWebmGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 録画 WebM ストリーム 録画 WebM ストリームを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoFileId">video file id</param>
        /// <param name="ss">再生位置</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StreamsRecordedVideoFileIdWebmGetAsync(int videoFileId, int ss, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await StreamsRecordedVideoFileIdWebmGetWithHttpInfoAsync(videoFileId, ss, mode, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// 録画 WebM ストリーム 録画 WebM ストリームを取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoFileId">video file id</param>
        /// <param name="ss">再生位置</param>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object>> StreamsRecordedVideoFileIdWebmGetWithHttpInfoAsync(int videoFileId, int ss, int mode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "video/webm",
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoFileId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(videoFileId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "ss", ss));
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));

            localVarRequestOptions.Operation = "StreamsApi.StreamsRecordedVideoFileIdWebmGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/streams/recorded/{videoFileId}/webm", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsRecordedVideoFileIdWebmGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ストリームを停止 ストリームを停止する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ストリーム id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void StreamsStreamIdDelete(int streamId, int operationIndex = 0)
        {
            StreamsStreamIdDeleteWithHttpInfo(streamId);
        }

        /// <summary>
        /// ストリームを停止 ストリームを停止する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ストリーム id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object> StreamsStreamIdDeleteWithHttpInfo(int streamId, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("streamId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(streamId)); // path parameter

            localVarRequestOptions.Operation = "StreamsApi.StreamsStreamIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/streams/{streamId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsStreamIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ストリームを停止 ストリームを停止する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ストリーム id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StreamsStreamIdDeleteAsync(int streamId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await StreamsStreamIdDeleteWithHttpInfoAsync(streamId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// ストリームを停止 ストリームを停止する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ストリーム id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object>> StreamsStreamIdDeleteWithHttpInfoAsync(int streamId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("streamId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(streamId)); // path parameter

            localVarRequestOptions.Operation = "StreamsApi.StreamsStreamIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/streams/{streamId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsStreamIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ストリーム停止タイマーを更新する ストリーム停止タイマーを更新する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ストリーム id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void StreamsStreamIdKeepPut(int streamId, int operationIndex = 0)
        {
            StreamsStreamIdKeepPutWithHttpInfo(streamId);
        }

        /// <summary>
        /// ストリーム停止タイマーを更新する ストリーム停止タイマーを更新する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ストリーム id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object> StreamsStreamIdKeepPutWithHttpInfo(int streamId, int operationIndex = 0)
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("streamId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(streamId)); // path parameter

            localVarRequestOptions.Operation = "StreamsApi.StreamsStreamIdKeepPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/streams/{streamId}/keep", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsStreamIdKeepPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ストリーム停止タイマーを更新する ストリーム停止タイマーを更新する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ストリーム id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StreamsStreamIdKeepPutAsync(int streamId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await StreamsStreamIdKeepPutWithHttpInfoAsync(streamId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// ストリーム停止タイマーを更新する ストリーム停止タイマーを更新する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="streamId">ストリーム id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object>> StreamsStreamIdKeepPutWithHttpInfoAsync(int streamId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("streamId", X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToString(streamId)); // path parameter

            localVarRequestOptions.Operation = "StreamsApi.StreamsStreamIdKeepPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/streams/{streamId}/keep", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StreamsStreamIdKeepPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
