/*
 * epgstation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.6.20
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using X68fpjc.Jellyfin.EPGStation.OpenAPI.Client;
using X68fpjc.Jellyfin.EPGStation.OpenAPI.Model;

namespace X68fpjc.Jellyfin.EPGStation.OpenAPI.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIptvApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// IPTV channel list を取得
        /// </summary>
        /// <remarks>
        /// IPTV channel list を取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="isHalfWidth">半角文字で取得するか (optional, default to true)</param>
        /// <returns></returns>
        void IptvChannelM3u8Get(int mode, bool? isHalfWidth = default(bool?));

        /// <summary>
        /// IPTV channel list を取得
        /// </summary>
        /// <remarks>
        /// IPTV channel list を取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="isHalfWidth">半角文字で取得するか (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IptvChannelM3u8GetWithHttpInfo(int mode, bool? isHalfWidth = default(bool?));
        /// <summary>
        /// IPTV epg を取得
        /// </summary>
        /// <remarks>
        /// IPTV epg を取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか (optional, default to true)</param>
        /// <param name="days">取得日数 (optional, default to 3)</param>
        /// <returns></returns>
        void IptvEpgXmlGet(bool? isHalfWidth = default(bool?), int? days = default(int?));

        /// <summary>
        /// IPTV epg を取得
        /// </summary>
        /// <remarks>
        /// IPTV epg を取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか (optional, default to true)</param>
        /// <param name="days">取得日数 (optional, default to 3)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IptvEpgXmlGetWithHttpInfo(bool? isHalfWidth = default(bool?), int? days = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIptvApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// IPTV channel list を取得
        /// </summary>
        /// <remarks>
        /// IPTV channel list を取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="isHalfWidth">半角文字で取得するか (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IptvChannelM3u8GetAsync(int mode, bool? isHalfWidth = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IPTV channel list を取得
        /// </summary>
        /// <remarks>
        /// IPTV channel list を取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="isHalfWidth">半角文字で取得するか (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IptvChannelM3u8GetWithHttpInfoAsync(int mode, bool? isHalfWidth = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IPTV epg を取得
        /// </summary>
        /// <remarks>
        /// IPTV epg を取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか (optional, default to true)</param>
        /// <param name="days">取得日数 (optional, default to 3)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IptvEpgXmlGetAsync(bool? isHalfWidth = default(bool?), int? days = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IPTV epg を取得
        /// </summary>
        /// <remarks>
        /// IPTV epg を取得する
        /// </remarks>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか (optional, default to true)</param>
        /// <param name="days">取得日数 (optional, default to 3)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IptvEpgXmlGetWithHttpInfoAsync(bool? isHalfWidth = default(bool?), int? days = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIptvApi : IIptvApiSync, IIptvApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IptvApi : IIptvApi
    {
        private X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IptvApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IptvApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IptvApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IptvApi(string basePath)
        {
            this.Configuration = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration.MergeConfigurations(
                X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.GlobalConfiguration.Instance,
                new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration { BasePath = basePath }
            );
            this.Client = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IptvApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IptvApi(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration.MergeConfigurations(
                X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IptvApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IptvApi(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ISynchronousClient client, X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.IAsynchronousClient asyncClient, X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// IPTV channel list を取得 IPTV channel list を取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="isHalfWidth">半角文字で取得するか (optional, default to true)</param>
        /// <returns></returns>
        public void IptvChannelM3u8Get(int mode, bool? isHalfWidth = default(bool?))
        {
            IptvChannelM3u8GetWithHttpInfo(mode, isHalfWidth);
        }

        /// <summary>
        /// IPTV channel list を取得 IPTV channel list を取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="isHalfWidth">半角文字で取得するか (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object> IptvChannelM3u8GetWithHttpInfo(int mode, bool? isHalfWidth = default(bool?))
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/x-mpegURL",
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (isHalfWidth != null)
            {
                localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "isHalfWidth", isHalfWidth));
            }
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/iptv/channel.m3u8", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IptvChannelM3u8Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IPTV channel list を取得 IPTV channel list を取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="isHalfWidth">半角文字で取得するか (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IptvChannelM3u8GetAsync(int mode, bool? isHalfWidth = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await IptvChannelM3u8GetWithHttpInfoAsync(mode, isHalfWidth, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// IPTV channel list を取得 IPTV channel list を取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mode">ストリーミング設定</param>
        /// <param name="isHalfWidth">半角文字で取得するか (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object>> IptvChannelM3u8GetWithHttpInfoAsync(int mode, bool? isHalfWidth = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/x-mpegURL",
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (isHalfWidth != null)
            {
                localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "isHalfWidth", isHalfWidth));
            }
            localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/iptv/channel.m3u8", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IptvChannelM3u8Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IPTV epg を取得 IPTV epg を取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか (optional, default to true)</param>
        /// <param name="days">取得日数 (optional, default to 3)</param>
        /// <returns></returns>
        public void IptvEpgXmlGet(bool? isHalfWidth = default(bool?), int? days = default(int?))
        {
            IptvEpgXmlGetWithHttpInfo(isHalfWidth, days);
        }

        /// <summary>
        /// IPTV epg を取得 IPTV epg を取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか (optional, default to true)</param>
        /// <param name="days">取得日数 (optional, default to 3)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object> IptvEpgXmlGetWithHttpInfo(bool? isHalfWidth = default(bool?), int? days = default(int?))
        {
            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (isHalfWidth != null)
            {
                localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "isHalfWidth", isHalfWidth));
            }
            if (days != null)
            {
                localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "days", days));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/iptv/epg.xml", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IptvEpgXmlGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IPTV epg を取得 IPTV epg を取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか (optional, default to true)</param>
        /// <param name="days">取得日数 (optional, default to 3)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IptvEpgXmlGetAsync(bool? isHalfWidth = default(bool?), int? days = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await IptvEpgXmlGetWithHttpInfoAsync(isHalfWidth, days, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// IPTV epg を取得 IPTV epg を取得する
        /// </summary>
        /// <exception cref="X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isHalfWidth">半角文字で取得するか (optional, default to true)</param>
        /// <param name="days">取得日数 (optional, default to 3)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ApiResponse<Object>> IptvEpgXmlGetWithHttpInfoAsync(bool? isHalfWidth = default(bool?), int? days = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions localVarRequestOptions = new X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml",
                "application/json"
            };

            var localVarContentType = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (isHalfWidth != null)
            {
                localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "isHalfWidth", isHalfWidth));
            }
            if (days != null)
            {
                localVarRequestOptions.QueryParameters.Add(X68fpjc.Jellyfin.EPGStation.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "days", days));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/iptv/epg.xml", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IptvEpgXmlGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
